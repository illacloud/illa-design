{"version":3,"file":"input-number.stories-76c6be73.js","sources":["../../../../packages/input-number/src/style.ts","../../../../packages/input-number/src/utils.ts","../../../../packages/input-number/src/Decimal.ts","../../../../packages/input-number/src/input-number.tsx"],"sourcesContent":["import { css, SerializedStyles } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/theme\"\nimport { InputNumberSize } from \"./interface\"\n\nexport const controlContainerStyle = css`\n  transition: all 0.2s ease-in-out;\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  visibility: hidden;\n`\n\nexport function applyControlBlockStyle(\n  direction: \"up\" | \"bottom\",\n  size: InputNumberSize,\n): SerializedStyles {\n  return css`\n    display: inline-flex;\n    flex-direction: column;\n    align-items: center;\n    width: 18px;\n    height: ${size === \"small\" ? \"9px\" : \"11px\"};\n    border-radius: ${direction === \"up\" ? \"3px 3px 0 0\" : \"0 0 3px 3px\"};\n    background-color: ${getColor(\"grayBlue\", \"09\")};\n    font-size: 10px;\n    color: ${getColor(\"grayBlue\", \"04\")};\n\n    &:hover {\n      background-color: ${getColor(\"grayBlue\", \"07\")};\n    }\n  `\n}\n\nexport const hoverControlStyle = css`\n  &:hover {\n    .control {\n      visibility: visible;\n    }\n  }\n`\n\nexport function applyActionIconStyle(size: InputNumberSize): SerializedStyles {\n  return css`\n    font-size: 12px;\n    margin-left: ${size === \"large\" ? \"-2px\" : \"-6px\"};\n    margin-right: ${size === \"large\" ? \"-2px\" : \"-6px\"};\n    color: ${getColor(\"grayBlue\", \"05\")};\n    &:active {\n      color: ${getColor(\"grayBlue\", \"02\")};\n    }\n  `\n}\n","/**\n * Judge whether a number is scientific notation\n */\nexport function isE(number: string | number) {\n  return !Number.isNaN(Number(number)) && String(number).includes(\"e\")\n}\n\n/**\n * Judge whether BigInt is supported by current env\n */\nexport function supportBigInt() {\n  return typeof BigInt === \"function\"\n}\n\n/**\n * Get precision of a number, include scientific notation like 1e-10\n */\nexport function getNumberPrecision(number: string | number) {\n  const numStr: string = String(number)\n\n  if (isE(number)) {\n    let precision = Number(numStr.slice(numStr.indexOf(\"e-\") + 2))\n    numStr.replace(/\\.(\\d+)/, (_, $1) => {\n      precision += $1.length\n      return _\n    })\n    return precision\n  }\n\n  return numStr.includes(\".\") && validateNumber(numStr)\n    ? numStr.length - numStr.indexOf(\".\") - 1\n    : 0\n}\n\n/**\n * Convert number to non-scientific notation\n */\nexport function toSafeString(number: number | string): string {\n  let nativeNumberStr: string = String(number)\n\n  if (isE(number)) {\n    // @ts-ignore\n    if (number < Number.MIN_SAFE_INTEGER) {\n      return supportBigInt()\n        ? BigInt(number).toString()\n        : Number.MIN_SAFE_INTEGER.toString()\n    }\n\n    // @ts-ignore\n    if (number > Number.MAX_SAFE_INTEGER) {\n      return supportBigInt()\n        ? BigInt(number).toString()\n        : Number.MAX_SAFE_INTEGER.toString()\n    }\n\n    // This may lose precision, but foFixed must accept argument in the range 0-100\n    const precision = getNumberPrecision(nativeNumberStr)\n    nativeNumberStr = Number(number).toFixed(Math.min(100, precision))\n  }\n\n  return trimNumber(nativeNumberStr).fullStr\n}\n\n/**\n * Judge whether a number is valid\n */\nexport function validateNumber(num: string | number) {\n  if (typeof num === \"number\") {\n    return !Number.isNaN(num)\n  }\n\n  if (!num) {\n    return false\n  }\n\n  return (\n    // 1.1\n    /^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num) ||\n    // 1.\n    /^\\s*-?\\d+\\.\\s*$/.test(num) ||\n    // .1\n    /^\\s*-?\\.\\d+\\s*$/.test(num)\n  )\n}\n\nexport function trimNumber(numStr: string) {\n  let str = numStr.trim()\n  let negative = false\n\n  str = str\n    // Remove negative-label(-) at head.\n    .replace(/^-/, () => {\n      negative = true\n      return \"\"\n    })\n    // Remove useless 0 at decimal end. `1.00100` => `1.001`\n    .replace(/(\\.\\d*[^0])0*$/, \"$1\")\n    // Remove useless decimal.\n    .replace(/\\.0*$/, \"\")\n    // Remove useless 0 at head.\n    .replace(/^0+/, \"\")\n    // Add 0 before empty dot. `.1` => `0.1`\n    .replace(/^\\./, \"0.\")\n\n  const trimStr = str || \"0\"\n  const [integerStr = \"0\", decimalStr = \"0\"] = trimStr.split(\".\")\n\n  if (integerStr === \"0\" && decimalStr === \"0\") {\n    negative = false\n  }\n\n  const negativeStr = negative ? \"-\" : \"\"\n\n  return {\n    negative,\n    negativeStr,\n    trimStr,\n    integerStr,\n    decimalStr,\n    fullStr: `${negativeStr}${trimStr}`,\n  }\n}\n","import {\n  toSafeString,\n  trimNumber,\n  validateNumber,\n  getNumberPrecision,\n  supportBigInt,\n} from \"./utils\"\n\nexport class BigIntDecimal {\n  readonly isEmpty: boolean = false\n\n  readonly isNaN: boolean = false\n\n  private readonly isNegative: boolean = false\n\n  private readonly origin: string = \"\"\n\n  private readonly integer!: bigint\n\n  private readonly decimal!: bigint\n\n  private readonly decimalLen!: number\n\n  constructor(value: string | number) {\n    this.origin = String(value)\n\n    if ((!value && value !== 0) || !this.origin.trim()) {\n      this.isEmpty = true\n      return\n    }\n\n    if (value === \"-\") {\n      this.isNaN = true\n      return\n    }\n\n    const safeValueString = toSafeString(value)\n    if (validateNumber(safeValueString)) {\n      const { negative, trimStr } = trimNumber(safeValueString)\n      const [integerStr, decimalStr = \"0\"] = trimStr.split(\".\")\n      this.isNegative = negative\n      this.integer = BigInt(integerStr)\n      this.decimal = BigInt(decimalStr)\n      this.decimalLen = decimalStr.length\n    } else {\n      this.isNaN = true\n    }\n  }\n\n  get isInvalid() {\n    return this.isEmpty || this.isNaN\n  }\n\n  private getMark() {\n    return this.isNegative ? \"-\" : \"\"\n  }\n\n  private getIntegerStr() {\n    return this.integer.toString()\n  }\n\n  private getDecimalStr() {\n    return this.decimal.toString().padStart(this.decimalLen, \"0\")\n  }\n\n  private alignDecimal(decimalLength: number): bigint {\n    return BigInt(\n      `${this.getMark()}${this.getIntegerStr()}${this.getDecimalStr().padEnd(\n        decimalLength,\n        \"0\",\n      )}`,\n    )\n  }\n\n  negate() {\n    const numStr = this.toString()\n    return new BigIntDecimal(\n      numStr.startsWith(\"-\") ? numStr.slice(1) : `-${numStr}`,\n    )\n  }\n\n  add(value: string | number): BigIntDecimal {\n    const offset = new BigIntDecimal(value)\n\n    if (offset.isInvalid) {\n      return this\n    }\n\n    if (this.isInvalid) {\n      return offset\n    }\n\n    const maxDecimalLength = Math.max(this.decimalLen, offset.decimalLen)\n    const thisAlignedDecimal = this.alignDecimal(maxDecimalLength)\n    const offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength)\n    const valueStr = (thisAlignedDecimal + offsetAlignedDecimal).toString()\n    const { negativeStr, trimStr } = trimNumber(valueStr)\n    const hydrateValueStr = `${negativeStr}${trimStr.padStart(\n      maxDecimalLength + 1,\n      \"0\",\n    )}`\n\n    return new BigIntDecimal(\n      `${hydrateValueStr.slice(0, -maxDecimalLength)}.${hydrateValueStr.slice(\n        -maxDecimalLength,\n      )}`,\n    )\n  }\n\n  equals(target: BigIntDecimal) {\n    return this.toString() === target?.toString()\n  }\n\n  less(target: BigIntDecimal) {\n    return this.isInvalid || target.isInvalid\n      ? false\n      : this.add(target.negate().toString()).toNumber() < 0\n  }\n\n  toNumber(): number {\n    return this.isNaN ? NaN : Number(this.toString())\n  }\n\n  toString(\n    options: { safe: boolean; precision?: number } = { safe: true },\n  ): string {\n    const { safe, precision } = options\n    const result = safe\n      ? this.isInvalid\n        ? \"\"\n        : trimNumber(\n            `${this.getMark()}${this.getIntegerStr()}.${this.getDecimalStr()}`,\n          ).fullStr\n      : this.origin\n    return typeof precision === \"number\" ? toFixed(result, precision) : result\n  }\n}\n\nexport class NumberDecimal {\n  readonly isEmpty: boolean = false\n\n  readonly isNaN: boolean = false\n\n  private readonly origin: string = \"\"\n\n  private readonly number: number\n\n  constructor(value: string | number) {\n    this.origin = String(value)\n    this.number = Number(value)\n\n    if ((!value && value !== 0) || !this.origin.trim()) {\n      this.isEmpty = true\n    } else {\n      this.isNaN = Number.isNaN(this.number)\n    }\n  }\n\n  get isInvalid() {\n    return this.isEmpty || this.isNaN\n  }\n\n  negate() {\n    return new NumberDecimal(-this.toNumber())\n  }\n\n  equals(target: NumberDecimal) {\n    return this.toNumber() === target?.toNumber()\n  }\n\n  less(target: NumberDecimal) {\n    return this.isInvalid || target.isInvalid\n      ? false\n      : this.add(target.negate().toString()).toNumber() < 0\n  }\n\n  add(value: string | number): NumberDecimal {\n    const offset = new NumberDecimal(value)\n\n    if (offset.isInvalid) {\n      return this\n    }\n\n    if (this.isInvalid) {\n      return offset\n    }\n\n    const result = this.number + offset.number\n    if (result > Number.MAX_SAFE_INTEGER) {\n      return new NumberDecimal(Number.MAX_SAFE_INTEGER)\n    }\n\n    if (result < Number.MIN_SAFE_INTEGER) {\n      return new NumberDecimal(Number.MIN_SAFE_INTEGER)\n    }\n\n    const maxPrecision = Math.max(\n      getNumberPrecision(this.number),\n      getNumberPrecision(offset.number),\n    )\n    return new NumberDecimal(result.toFixed(maxPrecision))\n  }\n\n  toNumber() {\n    return this.number\n  }\n\n  toString(options: { safe: boolean; precision?: number } = { safe: true }) {\n    const { safe, precision } = options\n    const result = safe\n      ? this.isInvalid\n        ? \"\"\n        : toSafeString(this.number)\n      : this.origin\n    return typeof precision === \"number\" ? toFixed(result, precision) : result\n  }\n}\n\nexport function getDecimal(value: string | number) {\n  return supportBigInt() ? new BigIntDecimal(value) : new NumberDecimal(value)\n}\n\n/**\n * Replace String.prototype.toFixed like Math.round\n * If cutOnly is true, just slice the tail\n * e.g. Decimal.toFixed(0.15) will return 0.2, not 0.1\n */\nexport function toFixed(\n  numStr: string,\n  precision?: number,\n  cutOnly = false,\n): string {\n  if (numStr === \"\") {\n    return \"\"\n  }\n\n  const separator = \".\"\n  const { negativeStr, integerStr, decimalStr } = trimNumber(numStr)\n  const precisionDecimalStr = `${separator}${decimalStr}`\n  const numberWithoutDecimal = `${negativeStr}${integerStr}`\n\n  if (precision && precision >= 0) {\n    const advancedNum = Number(decimalStr[precision])\n    if (advancedNum >= 5 && !cutOnly) {\n      const advancedDecimal = getDecimal(numStr).add(\n        `${negativeStr}0.${\"0\".repeat(precision)}${10 - advancedNum}`,\n      )\n      return toFixed(advancedDecimal.toString(), precision, cutOnly)\n    }\n\n    return precision === 0\n      ? numberWithoutDecimal\n      : `${numberWithoutDecimal}${separator}${decimalStr\n          .padEnd(precision, \"0\")\n          .slice(0, precision)}`\n  }\n\n  return `${numberWithoutDecimal}${\n    precisionDecimalStr === \".0\" ? \"\" : precisionDecimalStr\n  }`\n}\n","import {\n  forwardRef,\n  MutableRefObject,\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  FocusEvent,\n} from \"react\"\nimport { InputNumberProps } from \"./interface\"\nimport { Input } from \"@illa-design/input\"\nimport { DownIcon, MinusIcon, PlusIcon, UpIcon } from \"@illa-design/icon\"\nimport { Space } from \"@illa-design/space\"\nimport { isNumber, mergeRefs } from \"@illa-design/system\"\nimport {\n  applyActionIconStyle,\n  applyControlBlockStyle,\n  controlContainerStyle,\n  hoverControlStyle,\n} from \"./style\"\nimport { BigIntDecimal, getDecimal, NumberDecimal } from \"./Decimal\"\n\nexport const InputNumber = forwardRef<HTMLInputElement, InputNumberProps>(\n  (props, ref) => {\n    const {\n      size = \"medium\",\n      colorScheme = \"blue\",\n      disabled,\n      precision,\n      error,\n      hideControl,\n      readOnly,\n      max = Number.MAX_SAFE_INTEGER,\n      min = Number.MIN_SAFE_INTEGER,\n      step = 1,\n      onBlur,\n      onFocus,\n      placeholder,\n      mode = \"embed\",\n      prefix,\n      suffix,\n      defaultValue,\n      icons,\n      inputRef,\n      formatter,\n      parser,\n      onChange,\n      onInput,\n      ...otherProps\n    } = props\n\n    const mergedPrecision = (() => {\n      if (isNumber(precision)) {\n        const decimal = `${step}`.split(\".\")[1]\n        const stepPrecision = (decimal && decimal.length) || 0\n        return Math.max(stepPrecision, precision)\n      }\n      return null\n    })()\n\n    const [innerValue, setInnerValue] = useState(() => {\n      return getDecimal(\n        \"value\" in props\n          ? props.value!\n          : \"defaultValue\" in props\n          ? defaultValue!\n          : \"\",\n      )\n    })\n\n    const [isUserTyping, setIsUserTyping] = useState(false)\n\n    const [inputValue, setInputValue] = useState(\"\")\n\n    const value = useMemo(() => {\n      return \"value\" in props ? getDecimal(props.value!) : innerValue\n    }, [props, innerValue])\n\n    const [maxDecimal, minDecimal] = useMemo(() => {\n      return [getDecimal(max), getDecimal(min)]\n    }, [max, min])\n\n    const setValue = useCallback(\n      (newValue: BigIntDecimal | NumberDecimal) => {\n        setInnerValue(newValue)\n        // @ts-ignore\n        if (!newValue.equals(value) && onChange) {\n          const newValueStr = newValue.toString({\n            safe: true,\n            precision: mergedPrecision ?? undefined,\n          })\n          onChange(\n            newValue.isEmpty\n              ? undefined\n              : newValue.isNaN\n              ? NaN\n              : Number(newValueStr),\n          )\n        }\n      },\n      [mergedPrecision, onChange, value],\n    )\n\n    const getLegalValue = useCallback<\n      (value: BigIntDecimal | NumberDecimal) => BigIntDecimal | NumberDecimal\n    >(\n      (changedValue) => {\n        let finalValue = changedValue\n\n        // @ts-ignore\n        if (finalValue.less(minDecimal)) {\n          finalValue = minDecimal\n          // @ts-ignore\n        } else if (maxDecimal.less(finalValue)) {\n          finalValue = maxDecimal\n        }\n\n        return finalValue\n      },\n      [minDecimal, maxDecimal],\n    )\n\n    const currentInputRef =\n      useRef<HTMLInputElement>() as MutableRefObject<HTMLInputElement>\n\n    const plusStep = useCallback((): void => {\n      const finalValue = value.isInvalid\n        ? getDecimal(min === -Infinity || (min <= 0 && max >= 0) ? 0 : min)\n        : value.add(step)\n\n      setValue(getLegalValue(finalValue))\n      currentInputRef.current && currentInputRef.current.focus()\n    }, [getLegalValue, max, min, setValue, step, value])\n\n    const minusStep = useCallback((): void => {\n      const finalValue = value.isInvalid\n        ? getDecimal(min === -Infinity || (min <= 0 && max >= 0) ? 0 : min)\n        : value.add(-step)\n\n      setValue(getLegalValue(finalValue))\n      currentInputRef.current && currentInputRef.current.focus()\n    }, [getLegalValue, max, min, setValue, step, value])\n\n    const control = (\n      <div className=\"control\" css={controlContainerStyle}>\n        <div css={applyControlBlockStyle(\"up\", size)} onClick={plusStep}>\n          {icons?.up ?? <UpIcon />}\n        </div>\n        <div css={applyControlBlockStyle(\"bottom\", size)} onClick={minusStep}>\n          {icons?.down ?? <DownIcon />}\n        </div>\n      </div>\n    )\n\n    const handleOnChange = (v: string) => {\n      setIsUserTyping(true)\n      const rawText = v.trim().replace(/。/g, \".\")\n      const parsedValue = parser ? parser(rawText) : rawText\n      if (\n        isNumber(+parsedValue) ||\n        parsedValue === \"-\" ||\n        !parsedValue ||\n        parsedValue === \".\"\n      ) {\n        setInputValue(rawText)\n        setValue(getLegalValue(getDecimal(parsedValue)))\n      }\n    }\n\n    const displayedInputValue = useMemo<string>(() => {\n      let _value: string\n      if (isUserTyping) {\n        _value = parser ? `${parser(inputValue)}` : inputValue\n      } else if (isNumber(mergedPrecision)) {\n        _value = value.toString({ safe: true, precision: mergedPrecision })\n      } else if (value.isInvalid) {\n        _value = \"\"\n      } else {\n        _value = value.toString()\n      }\n\n      return formatter ? `${formatter(_value)}` : _value\n    }, [value, inputValue, isUserTyping, mergedPrecision, parser, formatter])\n\n    const handleOnBlur = (e: FocusEvent<HTMLInputElement, Element>) => {\n      setValue(getLegalValue(value))\n      setIsUserTyping(false)\n      onBlur?.(e)\n    }\n\n    return (\n      <Input\n        ref={ref}\n        {...otherProps}\n        inputRef={mergeRefs(currentInputRef, inputRef)}\n        _css={hoverControlStyle}\n        size={size}\n        value={displayedInputValue}\n        onChange={handleOnChange}\n        onBlur={handleOnBlur}\n        onFocus={(e) => {\n          setInputValue(currentInputRef.current?.value)\n          onFocus?.(e)\n        }}\n        onPressEnter={() => {\n          currentInputRef.current && currentInputRef.current.blur()\n        }}\n        readOnly={readOnly}\n        placeholder={placeholder}\n        prefix={prefix}\n        suffix={\n          <Space mr=\"-8px\">\n            {suffix}\n            {!hideControl &&\n              !readOnly &&\n              !disabled &&\n              mode === \"embed\" &&\n              control}\n          </Space>\n        }\n        addBefore={\n          mode === \"button\" ? (\n            <span css={applyActionIconStyle(size)} onClick={minusStep}>\n              {icons?.minus ?? <MinusIcon />}\n            </span>\n          ) : undefined\n        }\n        addAfter={\n          mode === \"button\" ? (\n            <span css={applyActionIconStyle(size)} onClick={plusStep}>\n              {icons?.plus ?? <PlusIcon />}\n            </span>\n          ) : undefined\n        }\n        colorScheme={colorScheme}\n        disabled={disabled}\n        error={error}\n      />\n    )\n  },\n)\n\nInputNumber.displayName = \"InputNumber\"\n"],"names":["controlContainerStyle","css","applyControlBlockStyle","direction","size","getColor","hoverControlStyle","applyActionIconStyle","isE","number","supportBigInt","getNumberPrecision","numStr","precision","_","$1","validateNumber","toSafeString","nativeNumberStr","trimNumber","num","str","negative","trimStr","integerStr","decimalStr","negativeStr","BigIntDecimal","value","__publicField","safeValueString","decimalLength","offset","maxDecimalLength","thisAlignedDecimal","offsetAlignedDecimal","valueStr","hydrateValueStr","target","options","safe","result","toFixed","NumberDecimal","maxPrecision","getDecimal","cutOnly","separator","precisionDecimalStr","numberWithoutDecimal","advancedNum","advancedDecimal","InputNumber","forwardRef","props","ref","colorScheme","disabled","error","hideControl","readOnly","max","min","step","onBlur","onFocus","placeholder","mode","prefix","suffix","defaultValue","icons","inputRef","formatter","parser","onChange","onInput","otherProps","mergedPrecision","isNumber","decimal","stepPrecision","innerValue","setInnerValue","useState","isUserTyping","setIsUserTyping","inputValue","setInputValue","useMemo","maxDecimal","minDecimal","setValue","useCallback","newValue","newValueStr","getLegalValue","changedValue","finalValue","currentInputRef","useRef","plusStep","minusStep","control","jsxs","jsx","UpIcon","DownIcon","handleOnChange","v","rawText","parsedValue","displayedInputValue","_value","handleOnBlur","e","Input","mergeRefs","_a","Space","MinusIcon","PlusIcon"],"mappings":"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"}