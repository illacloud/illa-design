{"version":3,"file":"notification.stories-f2703d0c.js","sources":["../../../../packages/notification/src/style.ts","../../../../packages/notification/src/notification.tsx","../../../../packages/notification/src/notification-group.tsx"],"sourcesContent":["import { css, SerializedStyles } from \"@emotion/react\"\nimport { globalColor, illaPrefix, zIndex } from \"@illa-design/theme\"\nimport { Variants } from \"framer-motion\"\nimport { NotificationPosition } from \"./interface\"\n\nexport function applyNotification(closable?: boolean): SerializedStyles {\n  return css`\n    position: relative;\n    pointer-events: visible;\n    padding: 16px ${closable ? \"40px\" : \"16px\"} 16px 16px;\n    margin-bottom: 20px;\n    width: 320px;\n    display: flex;\n    box-sizing: border-box;\n    box-shadow: 0 4px 10px 0 ${globalColor(`--${illaPrefix}-blackAlpha-07`)};\n    border-radius: 8px;\n    border: 1px solid ${globalColor(`--${illaPrefix}-grayBlue-08`)};\n    background-color: ${globalColor(`--${illaPrefix}-white-01`)};\n    flex-direction: column;\n  `\n}\n\nexport const applyNotificationContentWrapper = css`\n  flex: 1;\n  word-break: break-all;\n`\n\nexport const applyNotificationTitle = css`\n  font-size: 16px;\n  font-weight: 500;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-02`)};\n  margin-bottom: 4px;\n`\n\nexport const applyNotificationContentStyle = css`\n  font-size: 14px;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-04`)};\n`\n\nexport const applyNotificationCloseBtn = css`\n  position: absolute;\n  right: 16px;\n  top: 16px;\n  font-size: 8px;\n  line-height: 0;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-03`)};\n  cursor: pointer;\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const applyNotificationAction = css`\n  text-align: right;\n  margin-top: 16px;\n`\n\nexport function applyNotificationSlide(\n  position: NotificationPosition,\n): Variants {\n  const originX =\n    position === \"topLeft\" || position === \"bottomLeft\" ? \"-100%\" : \"100%\"\n  return {\n    initial: {\n      x: `${originX}`,\n    },\n    animate: {\n      opacity: 1,\n      x: 0,\n    },\n    exit: {\n      opacity: 0,\n      transition: {\n        opacity: { duration: 0.2, ease: \"linear\" },\n      },\n    },\n  }\n}\n\nexport const applyContentWrapperStyle = css`\n  display: flex;\n  flex-direction: row;\n`\n\nexport function applyContentStyle(showIcon: boolean) {\n  return css`\n    flex: 1;\n    word-break: break-word;\n    margin-left: ${showIcon ? \"8px\" : \"0\"};\n  `\n}\n\nexport const applyNotificationLeftStyle = css`\n  padding-right: 8px;\n`\n\nexport function applyNotificationContainerStyle(\n  position: NotificationPosition,\n): SerializedStyles {\n  let positionStyle = css``\n  switch (position) {\n    case \"topLeft\":\n      positionStyle = css`\n        top: 20px;\n        left: 20px;\n        align-items: start;\n      `\n      break\n    case \"topRight\":\n      positionStyle = css`\n        top: 20px;\n        right: 20px;\n        align-items: end;\n      `\n      break\n    case \"bottomLeft\":\n      positionStyle = css`\n        bottom: 0;\n        left: 20px;\n        align-items: start;\n      `\n      break\n    case \"bottomRight\":\n      positionStyle = css`\n        bottom: 0;\n        right: 20px;\n        align-items: end;\n      `\n      break\n  }\n\n  return css`\n    display: inline-flex;\n    pointer-events: none;\n    z-index: ${zIndex.notification};\n    position: fixed;\n    flex-direction: column;\n    ${positionStyle};\n  `\n}\n","import {\n  forwardRef,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from \"react\"\nimport { NotificationProps } from \"./interface\"\nimport { motion } from \"framer-motion\"\nimport { notificationStore } from \"./notification-store\"\nimport { applyBoxStyle, getColor } from \"@illa-design/theme\"\nimport {\n  applyContentStyle,\n  applyContentWrapperStyle,\n  applyNotification,\n  applyNotificationAction,\n  applyNotificationCloseBtn,\n  applyNotificationContentStyle,\n  applyNotificationSlide,\n  applyNotificationTitle,\n} from \"./style\"\nimport {\n  CloseIcon,\n  ErrorCircleIcon,\n  InfoCircleIcon,\n  SuccessCircleIcon,\n  WarningCircleIcon,\n} from \"@illa-design/icon\"\n\nexport const Notification = forwardRef<HTMLDivElement, NotificationProps>(\n  (props, ref) => {\n    const {\n      type,\n      action,\n      closable,\n      showIcon = true,\n      duration,\n      id = \"\",\n      position = \"topRight\",\n      icon,\n      content,\n      title,\n      onClose,\n    } = props\n\n    const handlerId = useRef<number | undefined>()\n\n    const delayClose = useCallback(() => {\n      let timeId: number | undefined\n      if (duration) {\n        timeId = window.setTimeout(() => {\n          notificationStore.remove(id)\n          onClose?.()\n        }, duration)\n      } else {\n        timeId = window.setTimeout(() => {\n          notificationStore.remove(id)\n          onClose?.()\n          handlerId.current = undefined\n        }, notificationStore.getConfig()?.duration ?? 3000)\n      }\n      handlerId.current = timeId\n    }, [duration, id, onClose])\n\n    useEffect(() => {\n      delayClose()\n      return () => {\n        if (handlerId.current) {\n          clearTimeout(handlerId.current)\n          handlerId.current = undefined\n        }\n      }\n    }, [delayClose])\n\n    const normalIcon: ReactNode = useMemo(() => {\n      if (showIcon) {\n        if (icon) {\n          return icon\n        } else {\n          switch (type) {\n            case \"info\":\n              return (\n                <InfoCircleIcon mt=\"2px\" fs=\"16px\" c={getColor(\"blue\", \"03\")} />\n              )\n            case \"error\":\n              return (\n                <ErrorCircleIcon fs=\"16px\" mt=\"2px\" c={getColor(\"red\", \"03\")} />\n              )\n            case \"success\":\n              return (\n                <SuccessCircleIcon\n                  fs=\"16px\"\n                  mt=\"2px\"\n                  c={getColor(\"green\", \"03\")}\n                />\n              )\n            case \"warning\":\n              return (\n                <WarningCircleIcon\n                  fs=\"16px\"\n                  mt=\"2px\"\n                  c={getColor(\"red\", \"03\")}\n                />\n              )\n            case \"normal\":\n            default:\n              return <></>\n          }\n        }\n      } else {\n        return <></>\n      }\n    }, [showIcon, icon, type])\n\n    return (\n      <motion.div\n        ref={ref}\n        css={[applyNotification(closable), applyBoxStyle(props)]}\n        layout\n        initial=\"initial\"\n        animate=\"animate\"\n        exit=\"exit\"\n        variants={applyNotificationSlide(position)}\n        onMouseEnter={() => {\n          if (handlerId.current) {\n            clearTimeout(handlerId.current)\n            handlerId.current = undefined\n          }\n        }}\n        onMouseLeave={() => {\n          delayClose()\n        }}\n      >\n        <div css={applyContentWrapperStyle}>\n          {normalIcon}\n          <div css={applyContentStyle(showIcon)}>\n            {title && <div css={applyNotificationTitle}>{title}</div>}\n            {content && (\n              <div css={applyNotificationContentStyle}>{content}</div>\n            )}\n          </div>\n        </div>\n        {action && <div css={applyNotificationAction}>{action}</div>}\n        {closable && (\n          <div\n            css={applyNotificationCloseBtn}\n            onClick={() => {\n              onClose?.()\n            }}\n          >\n            <CloseIcon />\n          </div>\n        )}\n      </motion.div>\n    )\n  },\n)\n\nNotification.displayName = \"Notice\"\n","import { FC, useEffect, useMemo, useState } from \"react\"\nimport { AnimatePresence } from \"framer-motion\"\nimport { NotificationProps } from \"./interface\"\nimport { notificationStore } from \"./notification-store\"\nimport { Notification } from \"./notification\"\nimport { applyNotificationContainerStyle } from \"./style\"\nimport { applyBoxStyle, BoxProps } from \"@illa-design/theme\"\n\nexport const NotificationGroup: FC<BoxProps> = (props) => {\n  const [topLeftNotificationList, setTopLeftNotificationList] = useState<\n    NotificationProps[]\n  >([])\n  const [topRightNotificationList, setTopRightNotificationList] = useState<\n    NotificationProps[]\n  >([])\n  const [bottomLeftNotificationList, setBottomLeftNotificationList] = useState<\n    NotificationProps[]\n  >([])\n  const [bottomRightNotificationList, setBottomRightNotificationList] =\n    useState<NotificationProps[]>([])\n\n  useEffect(() => {\n    const listener = notificationStore.subscribe(() => {\n      setTopLeftNotificationList(\n        notificationStore.getNotification().filter((item) => {\n          return item.position === \"topLeft\"\n        }),\n      )\n      setTopRightNotificationList(\n        notificationStore.getNotification().filter((item) => {\n          return item.position === \"topRight\"\n        }),\n      )\n      setBottomLeftNotificationList(\n        notificationStore.getNotification().filter((item) => {\n          return item.position === \"bottomLeft\"\n        }),\n      )\n      setBottomRightNotificationList(\n        notificationStore.getNotification().filter((item) => {\n          return item.position === \"bottomRight\"\n        }),\n      )\n    })\n    return () => {\n      notificationStore.unSubscribe(listener.listenerId)\n    }\n  }, [])\n\n  const topLeftNotification = useMemo(() => {\n    return topLeftNotificationList.map((notification) => {\n      return <Notification key={notification.id} {...notification} />\n    })\n  }, [topLeftNotificationList])\n\n  const topRightNotification = useMemo(() => {\n    return topRightNotificationList.map((notification) => {\n      return <Notification key={notification.id} {...notification} />\n    })\n  }, [topRightNotificationList])\n\n  const bottomLeftNotification = useMemo(() => {\n    return bottomLeftNotificationList.map((notification) => {\n      return <Notification key={notification.id} {...notification} />\n    })\n  }, [bottomLeftNotificationList])\n\n  const bottomRightNotification = useMemo(() => {\n    return bottomRightNotificationList.map((notification) => {\n      return <Notification key={notification.id} {...notification} />\n    })\n  }, [bottomRightNotificationList])\n\n  return (\n    <>\n      <div\n        css={[applyNotificationContainerStyle(\"topLeft\"), applyBoxStyle(props)]}\n      >\n        <AnimatePresence>{topLeftNotification}</AnimatePresence>\n      </div>\n      <div\n        css={[\n          applyNotificationContainerStyle(\"topRight\"),\n          applyBoxStyle(props),\n        ]}\n      >\n        <AnimatePresence>{topRightNotification}</AnimatePresence>\n      </div>\n      <div\n        css={[\n          applyNotificationContainerStyle(\"bottomLeft\"),\n          applyBoxStyle(props),\n        ]}\n      >\n        <AnimatePresence>{bottomLeftNotification}</AnimatePresence>\n      </div>\n      <div\n        css={[\n          applyNotificationContainerStyle(\"bottomRight\"),\n          applyBoxStyle(props),\n        ]}\n      >\n        <AnimatePresence>{bottomRightNotification}</AnimatePresence>\n      </div>\n    </>\n  )\n}\n\nNotificationGroup.displayName = \"NotificationGroup\"\n"],"names":["applyNotification","closable","css","globalColor","illaPrefix","applyNotificationTitle","applyNotificationContentStyle","applyNotificationCloseBtn","applyNotificationAction","applyNotificationSlide","position","applyContentWrapperStyle","applyContentStyle","showIcon","applyNotificationContainerStyle","positionStyle","zIndex","Notification","forwardRef","props","ref","type","action","duration","id","icon","content","title","onClose","handlerId","useRef","delayClose","useCallback","timeId","notificationStore","_a","useEffect","normalIcon","useMemo","jsx","InfoCircleIcon","getColor","ErrorCircleIcon","SuccessCircleIcon","WarningCircleIcon","Fragment","jsxs","motion","applyBoxStyle","CloseIcon","NotificationGroup","topLeftNotificationList","setTopLeftNotificationList","useState","topRightNotificationList","setTopRightNotificationList","bottomLeftNotificationList","setBottomLeftNotificationList","bottomRightNotificationList","setBottomRightNotificationList","listener","item","topLeftNotification","notification","topRightNotification","bottomLeftNotification","bottomRightNotification","AnimatePresence"],"mappings":"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"}