{"version":3,"file":"select-2a1f440c.js","sources":["../../../../packages/select/src/style.ts","../../../../packages/select/src/single-select.tsx","../../../../packages/select/src/multiple-select.tsx","../../../../packages/select/src/select.tsx"],"sourcesContent":["import { css } from \"@emotion/react\"\n\nexport const dropListItemStyle = css`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`\nexport const dropLabelStyle = css`\n  display: inline-block;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`\n","import {\n  Children,\n  cloneElement,\n  forwardRef,\n  PropsWithChildren,\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\"\nimport {\n  OptionProps,\n  SelectOptionObject,\n  SelectProps,\n  SelectValue,\n} from \"./interface\"\nimport { Input } from \"@illa-design/input\"\nimport { Dropdown, DropList, DropListItem } from \"@illa-design/dropdown\"\nimport { useMergeValue } from \"@illa-design/system\"\nimport { DownIcon, LoadingIcon, UpIcon } from \"@illa-design/icon\"\nimport { getColor } from \"@illa-design/theme\"\nimport { Empty } from \"@illa-design/empty\"\nimport { dropLabelStyle, dropListItemStyle } from \"./style\"\n\nexport const SingleSelect = forwardRef<HTMLInputElement, SelectProps>(\n  (props, ref) => {\n    const {\n      size = \"medium\",\n      allowClear,\n      placeholder,\n      addAfter,\n      labelInValue,\n      colorScheme,\n      defaultPopupVisible,\n      popupVisible,\n      disabled,\n      error,\n      loading,\n      dropdownProps,\n      addBefore,\n      children,\n      prefix,\n      defaultValue,\n      options,\n      showSearch,\n      value,\n      filterOption,\n      readOnly,\n      variant,\n      onChange,\n      onClear,\n      onInputValueChange,\n      onKeyDown,\n      onVisibleChange,\n      onFocus,\n      onDeselect,\n      multiple,\n      onBlur,\n      trigger = \"click\",\n      autoAlignPopupWidth = true,\n      ...otherProps\n    } = props\n\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    const [finalPopupVisible, setFinalPopupVisible] = useMergeValue(false, {\n      defaultValue: defaultPopupVisible,\n      value: popupVisible,\n    })\n\n    const getValueFromProps = useCallback(\n      (\n        dealValue?:\n          | SelectOptionObject\n          | string\n          | SelectOptionObject[]\n          | string[]\n          | number\n          | number[]\n          | ReactNode,\n      ) => {\n        let dV: number | string | ReactNode | undefined = undefined\n        if (dealValue === undefined) {\n          dV = undefined\n        } else {\n          if (options === undefined) {\n            Children.forEach(children, (child) => {\n              const item = child as ReactElement<PropsWithChildren<OptionProps>>\n              if (\n                item.props.isSelectOption !== false &&\n                item.props.value === dealValue\n              ) {\n                dV = item.props.children\n              }\n            })\n          } else {\n            if (labelInValue) {\n              dV = (options as SelectOptionObject[]).find(\n                (option) =>\n                  option.value === (dealValue as SelectOptionObject).value,\n              )?.label\n            } else {\n              if (options.length > 0) {\n                if (\n                  typeof options[0] === \"string\" ||\n                  typeof options[0] === \"number\"\n                ) {\n                  dV = (options as [])?.find((v) => v === dealValue)\n                } else if (typeof options[0] === \"object\") {\n                  dV = (options as SelectOptionObject[]).find(\n                    (option) => option.value === dealValue,\n                  )?.label\n                }\n              }\n            }\n          }\n          if (dV === undefined) {\n            dV = dealValue as ReactNode\n          }\n        }\n        return dV\n      },\n      [children, labelInValue, options],\n    )\n\n    const [finalValue, setFinalValue] = useMergeValue<\n      number | string | ReactNode | undefined\n    >(\"\", {\n      defaultValue: getValueFromProps(defaultValue),\n      value: getValueFromProps(value),\n    })\n\n    const [finalInputValue, setFinalInputValue] = useState<\n      number | string | ReactNode | undefined\n    >(\n      value === undefined\n        ? getValueFromProps(defaultValue)\n        : getValueFromProps(value),\n    )\n\n    useEffect(() => {\n      const show = getValueFromProps(value)\n      setFinalInputValue(show)\n      lastChooseRef.current = show\n    }, [getValueFromProps, value])\n\n    const [finalSelectValue, setFinalSelectValue] = useMergeValue<\n      SelectValue | undefined\n    >(undefined, {\n      defaultValue: defaultValue,\n      value: value,\n    })\n\n    const lastChooseRef = useRef<string | null | ReactNode>(finalInputValue)\n\n    const finalOptions: SelectOptionObject[] = useMemo(() => {\n      let newOptions: SelectOptionObject[] = []\n      if (options && options.length > 0) {\n        if (typeof options[0] === \"string\" || typeof options[0] === \"number\") {\n          newOptions = (options as []).map((option) => ({\n            label: option + \"\",\n            value: option,\n          }))\n        } else {\n          newOptions = options as SelectOptionObject[]\n        }\n      }\n      if (\n        (filterOption || showSearch) &&\n        finalInputValue &&\n        finalInputValue !== \"\" &&\n        (typeof finalInputValue === \"string\" ||\n          typeof finalInputValue === \"number\")\n      ) {\n        newOptions = newOptions.filter((option) => {\n          if (typeof filterOption === \"function\") {\n            return filterOption(finalInputValue, option)\n          }\n          return (\n            typeof option.label === \"string\" &&\n            option.label\n              .toLowerCase()\n              .includes(finalInputValue.toString().toLowerCase())\n          )\n        })\n      }\n\n      return newOptions\n    }, [filterOption, finalInputValue, options, showSearch])\n\n    return (\n      <Dropdown\n        colorScheme=\"white\"\n        autoAlignPopupWidth={autoAlignPopupWidth}\n        trigger={trigger}\n        popupVisible={finalPopupVisible}\n        dropList={\n          <DropList\n            maxH=\"264px\"\n            onClickItem={(key, children) => {\n              if (options === undefined) {\n                if (value === undefined) {\n                  lastChooseRef.current = children\n                  setFinalInputValue(lastChooseRef.current ?? \"\")\n                  setFinalValue(lastChooseRef.current ?? \"\")\n                  setFinalSelectValue(key)\n                }\n                onChange?.(key)\n              } else {\n                const option = (options as []).find((o) => {\n                  if (typeof o === \"object\") {\n                    return (o as SelectOptionObject).value === key\n                  } else {\n                    return o === key\n                  }\n                })\n\n                if (option !== undefined) {\n                  if (labelInValue) {\n                    if (value === undefined) {\n                      lastChooseRef.current = (\n                        option as SelectOptionObject\n                      ).label\n                      setFinalInputValue(lastChooseRef.current ?? \"\")\n                      setFinalValue(lastChooseRef.current ?? \"\")\n                      setFinalSelectValue((option as SelectOptionObject).value)\n                    }\n                    onChange?.(option)\n                  } else {\n                    if (typeof option === \"object\") {\n                      if (value === undefined) {\n                        lastChooseRef.current = (\n                          option as SelectOptionObject\n                        ).label\n                        setFinalInputValue(lastChooseRef.current ?? \"\")\n                        setFinalValue(lastChooseRef.current ?? \"\")\n                        setFinalSelectValue(\n                          (option as SelectOptionObject).value,\n                        )\n                      }\n                      onChange?.((option as SelectOptionObject).value)\n                    } else {\n                      if (value === undefined) {\n                        lastChooseRef.current = option\n                        setFinalInputValue(lastChooseRef.current ?? \"\")\n                        setFinalValue(lastChooseRef.current ?? \"\")\n                        setFinalSelectValue(option)\n                      }\n                      onChange?.(option)\n                    }\n                  }\n                }\n              }\n            }}\n          >\n            {children === undefined || children === null\n              ? finalOptions?.map((option, i) => {\n                  return (\n                    <DropListItem\n                      key={option.value.toString()}\n                      value={option.value}\n                      css={dropListItemStyle}\n                      colorScheme={colorScheme}\n                      selected={option.value === finalSelectValue}\n                      disabled={option.disabled}\n                    >\n                      <span css={dropLabelStyle}>{option.label}</span>\n                    </DropListItem>\n                  )\n                })\n              : Children.map(children, (child) => {\n                  const item = child as ReactElement<\n                    PropsWithChildren<OptionProps>\n                  >\n                  if (item.props.isSelectOption === false) {\n                    return child\n                  }\n                  return cloneElement(item, {\n                    selected: item.props.value === finalSelectValue,\n                    colorScheme: colorScheme,\n                  })\n                })}\n            {(!finalOptions || finalOptions.length === 0) && !children && (\n              <Empty />\n            )}\n          </DropList>\n        }\n        disabled={disabled || readOnly}\n        onVisibleChange={(visible) => {\n          if (popupVisible === undefined) {\n            setFinalPopupVisible(visible)\n          }\n          if (showSearch) {\n            if (visible) {\n              setFinalInputValue(undefined)\n              onInputValueChange?.(\"\")\n            } else {\n              setFinalInputValue(lastChooseRef.current ?? \"\")\n              onInputValueChange?.(\"\")\n            }\n          }\n          onVisibleChange?.(visible)\n        }}\n        {...dropdownProps}\n      >\n        <Input\n          inputRef={inputRef}\n          variant={variant}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          value={showSearch ? finalInputValue : finalValue}\n          readOnly={!showSearch || readOnly}\n          addBefore={addBefore}\n          addAfter={addAfter}\n          error={error}\n          onKeyDown={onKeyDown}\n          disabled={disabled}\n          colorScheme={colorScheme}\n          size={size}\n          allowClear={allowClear}\n          prefix={prefix}\n          placeholder={\n            placeholder ??\n            (lastChooseRef.current !== undefined\n              ? String(lastChooseRef.current)\n              : undefined)\n          }\n          onChange={(v) => {\n            setFinalInputValue(v)\n            onInputValueChange?.(v)\n          }}\n          ref={ref}\n          onClear={() => {\n            if (value === undefined) {\n              setFinalInputValue(\"\")\n              setFinalValue(\"\")\n              onInputValueChange?.(\"\")\n              setFinalSelectValue(undefined)\n              lastChooseRef.current = undefined\n            }\n            onClear?.()\n            onChange?.(undefined)\n          }}\n          suffix={\n            !readOnly &&\n            (loading ? (\n              <LoadingIcon c={getColor(\"grayBlue\", \"05\")} spin={true} />\n            ) : finalPopupVisible ? (\n              <UpIcon />\n            ) : (\n              <DownIcon />\n            ))\n          }\n          {...otherProps}\n        />\n      </Dropdown>\n    )\n  },\n)\n\nSingleSelect.displayName = \"SingleSelect\"\n","import { forwardRef, useMemo, useRef, useState } from \"react\"\nimport { SelectOptionObject, SelectProps } from \"./interface\"\nimport { Dropdown, DropList, DropListItem } from \"@illa-design/dropdown\"\nimport { useMergeValue } from \"@illa-design/system\"\nimport { DownIcon, LoadingIcon, UpIcon } from \"@illa-design/icon\"\nimport { getColor } from \"@illa-design/theme\"\nimport { Empty } from \"@illa-design/empty\"\nimport { InputTag, TagObject, InputTagRefHandler } from \"@illa-design/input-tag\"\nimport { Checkbox } from \"@illa-design/checkbox\"\nimport { dropListItemStyle, dropLabelStyle } from \"./style\"\n\nexport const MultipleSelect = forwardRef<HTMLDivElement, SelectProps>(\n  (props, ref) => {\n    const {\n      size = \"medium\",\n      allowClear,\n      placeholder,\n      labelInValue,\n      colorScheme,\n      defaultPopupVisible,\n      popupVisible,\n      children,\n      addAfter,\n      disabled,\n      error,\n      loading,\n      dropdownProps,\n      variant,\n      addBefore,\n      prefix,\n      defaultValue,\n      options,\n      showSearch,\n      value,\n      readOnly,\n      filterOption,\n      onChange,\n      onClear,\n      onInputValueChange,\n      onKeyDown,\n      onVisibleChange,\n      trigger = \"click\",\n      onDeselect,\n      onFocus,\n      onBlur,\n      multiple,\n      autoAlignPopupWidth = true,\n      ...otherProps\n    } = props\n\n    const focusNum = useRef<number>(0)\n    const lastFocusState = useRef(false)\n\n    const inputTagRef = useRef<InputTagRefHandler | undefined>()\n\n    const [finalPopupVisible, setFinalPopupVisible] = useMergeValue(false, {\n      defaultValue: defaultPopupVisible,\n      value: popupVisible,\n    })\n\n    const [finalValue, setFinalValue] = useMergeValue<\n      string[] | SelectOptionObject[] | number[]\n    >([], {\n      value: labelInValue ? (value as SelectOptionObject[]) : (value as []),\n      defaultValue: labelInValue\n        ? (defaultValue as SelectOptionObject[])\n        : (defaultValue as []),\n    })\n\n    const [finalInputValue, setFinalInputValue] = useState<number | string>(\"\")\n\n    const finalOptions: SelectOptionObject[] = useMemo(() => {\n      let newOptions: SelectOptionObject[] = []\n      if (options && options.length > 0) {\n        if (typeof options[0] === \"string\" || typeof options[0] === \"number\") {\n          newOptions = (options as []).map((option) => ({\n            label: option + \"\",\n            value: option,\n          }))\n        } else {\n          newOptions = options as SelectOptionObject[]\n        }\n      }\n      if (\n        (filterOption || showSearch) &&\n        finalInputValue &&\n        finalInputValue !== \"\"\n      ) {\n        newOptions = newOptions.filter((option) => {\n          if (typeof filterOption === \"function\") {\n            return filterOption(finalInputValue, option)\n          }\n          return (\n            typeof option.label === \"string\" &&\n            option.label.includes(finalInputValue.toString())\n          )\n        })\n      }\n      return newOptions\n    }, [filterOption, finalInputValue, options, showSearch])\n\n    const finalTagValue: TagObject[] = useMemo(() => {\n      if (options && options.length > 0) {\n        return finalValue.map((v, index) => {\n          if (labelInValue) {\n            return {\n              label: (v as SelectOptionObject).label,\n              value: (v as SelectOptionObject).value,\n              closeable: !readOnly,\n            } as TagObject\n          } else {\n            if (\n              typeof options[0] === \"string\" ||\n              typeof options[0] === \"number\"\n            ) {\n              return {\n                label: (options as []).find((item) => item === v) + \"\",\n                value: v,\n                closeable: !readOnly,\n              } as TagObject\n            } else {\n              return {\n                label: (options as SelectOptionObject[]).find(\n                  (item) => item.value === v,\n                )?.label,\n                value: v,\n                closeable: !readOnly,\n              } as TagObject\n            }\n          }\n        })\n      } else {\n        return []\n      }\n    }, [finalValue, labelInValue, options, readOnly])\n\n    return (\n      <Dropdown\n        onFocus={(e) => {\n          focusNum.current = focusNum.current + 1\n          setTimeout(() => {\n            if (focusNum.current === 1 && !lastFocusState.current) {\n              lastFocusState.current = true\n              onFocus?.(e)\n            }\n          })\n        }}\n        onBlur={(e) => {\n          focusNum.current = focusNum.current - 1\n          setTimeout(() => {\n            if (focusNum.current === 0) {\n              lastFocusState.current = false\n              onBlur?.(e)\n            }\n          })\n        }}\n        colorScheme=\"white\"\n        autoAlignPopupWidth={autoAlignPopupWidth}\n        trigger={trigger}\n        triggerProps={{\n          closeOnInnerClick: false,\n          closeOnClick: false,\n          disabled: readOnly,\n        }}\n        popupVisible={finalPopupVisible}\n        dropList={\n          <DropList\n            maxH=\"264px\"\n            onClick={() => {\n              inputTagRef.current?.focus()\n            }}\n            onClickItem={(key) => {\n              const option = finalOptions.find(\n                (option) => String(option.value) === key,\n              )\n              if (option) {\n                if (labelInValue) {\n                  let selectedValue = (finalValue as SelectOptionObject[]).find(\n                    (v) => v.value === option.value,\n                  )\n                  if (selectedValue !== undefined) {\n                    onDeselect?.(selectedValue as SelectOptionObject)\n                    let newList = [...finalValue]\n                    newList.splice(\n                      newList.findIndex((v) => selectedValue === v),\n                      1,\n                    )\n                    if (value === undefined) {\n                      setFinalValue(newList as SelectOptionObject[])\n                    }\n                    onChange?.(newList as SelectOptionObject[])\n                  } else {\n                    let newList = [...finalValue]\n                    newList.push(option)\n                    if (value === undefined) {\n                      setFinalValue(newList as SelectOptionObject[])\n                    }\n                    onChange?.(newList as SelectOptionObject[])\n                  }\n                } else {\n                  let selectedValue = (finalValue as []).find(\n                    (v) => v === option.value,\n                  )\n                  if (selectedValue !== undefined) {\n                    onDeselect?.(selectedValue)\n                    let newList = [...finalValue]\n                    newList.splice(\n                      newList.findIndex((v) => selectedValue === v),\n                      1,\n                    )\n                    if (value === undefined) {\n                      setFinalValue(newList as [])\n                    }\n                    onChange?.(newList as [])\n                  } else {\n                    let newList = [...finalValue]\n                    newList.push(option.value)\n                    if (value === undefined) {\n                      setFinalValue(newList as [])\n                    }\n                    onChange?.(newList as [])\n                  }\n                }\n              }\n            }}\n          >\n            {finalOptions?.map((option, i) => {\n              return (\n                <DropListItem\n                  key={option.value.toString()}\n                  colorScheme={colorScheme}\n                  value={option.value.toString()}\n                  selected={\n                    typeof finalValue[0] === \"object\"\n                      ? (finalValue as SelectOptionObject[]).find(\n                          (i) => i.value === option.value,\n                        ) !== undefined\n                      : typeof finalValue[0] === \"string\"\n                      ? (finalValue as string[]).includes(String(option.value))\n                      : (finalValue as number[]).includes(Number(option.value))\n                  }\n                  disabled={option.disabled}\n                >\n                  <div css={dropListItemStyle}>\n                    <Checkbox\n                      colorScheme={colorScheme}\n                      flex=\"none\"\n                      mr=\"8px\"\n                      checked={\n                        labelInValue\n                          ? (finalValue as SelectOptionObject[]).find(\n                              (v) => v.label === option.label,\n                            ) !== undefined\n                          : (finalValue as []).find(\n                              (v) => v === option.value,\n                            ) !== undefined\n                      }\n                    />\n                    <span css={dropLabelStyle}>{option.label}</span>\n                  </div>\n                </DropListItem>\n              )\n            })}\n            {(!finalOptions || finalOptions.length === 0) && <Empty />}\n          </DropList>\n        }\n        disabled={disabled}\n        onVisibleChange={(visible) => {\n          if (popupVisible === undefined) {\n            setFinalPopupVisible(visible)\n          }\n          onVisibleChange?.(visible)\n        }}\n        {...dropdownProps}\n      >\n        <InputTag\n          ref={ref}\n          readOnly={!showSearch || readOnly}\n          labelInValue={true}\n          inputValue={finalInputValue.toString()}\n          value={finalTagValue}\n          addAfter={addAfter}\n          addBefore={addBefore}\n          error={error}\n          onFocus={(e) => {\n            focusNum.current = focusNum.current + 1\n            setTimeout(() => {\n              if (focusNum.current === 1 && !lastFocusState.current) {\n                lastFocusState.current = true\n                onFocus?.(e)\n              }\n            })\n          }}\n          onBlur={(e) => {\n            focusNum.current = focusNum.current - 1\n            setTimeout(() => {\n              if (focusNum.current === 0) {\n                lastFocusState.current = false\n                onBlur?.(e)\n              }\n            })\n          }}\n          onKeyDown={onKeyDown}\n          disabled={disabled}\n          colorScheme={colorScheme}\n          size={size}\n          allowClear={allowClear}\n          prefix={prefix}\n          placeholder={placeholder}\n          inputTagRef={inputTagRef}\n          onInputChange={(v) => {\n            onInputValueChange?.(v)\n            setFinalInputValue(v)\n          }}\n          onClear={() => {\n            if (value === undefined) {\n              setFinalValue([])\n            }\n            setFinalInputValue(\"\")\n            onChange?.(undefined)\n          }}\n          onRemove={(v) => {\n            let removedTag = v as TagObject\n            if (labelInValue) {\n              let newList = [...finalValue] as SelectOptionObject[]\n              const index = newList.findIndex(\n                (item) => removedTag.label === item.label,\n              )\n              newList.splice(index, 1)\n              if (value === undefined) {\n                setFinalValue(newList as SelectOptionObject[])\n              }\n              onDeselect?.({\n                value: removedTag.value,\n                label: removedTag.label,\n              } as SelectOptionObject)\n              onChange?.(newList as SelectOptionObject[])\n            } else {\n              let newList = [...finalValue] as []\n              const index = newList.findIndex(\n                (item) => removedTag.value === item,\n              )\n              newList.splice(index, 1)\n              if (value === undefined) {\n                setFinalValue(newList as [])\n              }\n              onDeselect?.(removedTag.value)\n              onChange?.(newList as [])\n            }\n          }}\n          suffix={\n            !readOnly &&\n            (loading ? (\n              <LoadingIcon c={getColor(\"grayBlue\", \"05\")} spin={true} />\n            ) : finalPopupVisible ? (\n              <UpIcon />\n            ) : (\n              <DownIcon />\n            ))\n          }\n          {...otherProps}\n        />\n      </Dropdown>\n    )\n  },\n)\n\nMultipleSelect.displayName = \"MultipleSelect\"\n","import { forwardRef } from \"react\"\nimport { SelectProps } from \"./interface\"\nimport { SingleSelect } from \"./single-select\"\nimport { MultipleSelect } from \"./multiple-select\"\n\nexport const Select = forwardRef<HTMLInputElement, SelectProps>(\n  (props, ref) => {\n    if (props.multiple) {\n      return <MultipleSelect ref={ref} {...props} />\n    } else {\n      return <SingleSelect ref={ref} {...props} />\n    }\n  },\n)\n\nSelect.displayName = \"Select\"\n"],"names":["dropListItemStyle","css","dropLabelStyle","SingleSelect","forwardRef","props","ref","size","allowClear","placeholder","addAfter","labelInValue","colorScheme","defaultPopupVisible","popupVisible","disabled","error","loading","dropdownProps","addBefore","children","prefix","defaultValue","options","showSearch","value","filterOption","readOnly","variant","onChange","onClear","onInputValueChange","onKeyDown","onVisibleChange","onFocus","onDeselect","multiple","onBlur","trigger","autoAlignPopupWidth","otherProps","inputRef","useRef","finalPopupVisible","setFinalPopupVisible","useMergeValue","getValueFromProps","useCallback","dealValue","dV","Children","child","item","_a","option","v","_b","finalValue","setFinalValue","finalInputValue","setFinalInputValue","useState","useEffect","show","lastChooseRef","finalSelectValue","setFinalSelectValue","finalOptions","useMemo","newOptions","jsx","Dropdown","jsxs","DropList","key","children2","o","i","DropListItem","cloneElement","Empty","visible","Input","LoadingIcon","getColor","UpIcon","DownIcon","MultipleSelect","focusNum","lastFocusState","inputTagRef","finalTagValue","index","e","option2","selectedValue","newList","i2","Checkbox","InputTag","removedTag","Select"],"mappings":"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"}