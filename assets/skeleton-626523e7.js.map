{"version":3,"file":"skeleton-626523e7.js","sources":["../../../../packages/skeleton/src/style.ts","../../../../packages/skeleton/src/skeleton-text.tsx","../../../../packages/skeleton/src/skeleton-image.tsx","../../../../packages/skeleton/src/skeleton.tsx"],"sourcesContent":["import { css, SerializedStyles, keyframes } from \"@emotion/react\"\nimport { SkeletonImageProps, ImageShape, ImageSize } from \"./interface\"\n\nconst lightBGColor = \"#F9FAFC\"\nconst darkBGColor = \"#F2F3F5\"\n\nexport const skeletonStyle = css`\n  display: flex;\n`\n\nexport const skeletonTextStyle = css`\n  flex-grow: 1;\n  overflow: hidden;\n`\nexport const skeletonImageStyle = css`\n  margin-right: 16px;\n`\n\nexport function applyAnimation(animatin?: boolean): SerializedStyles {\n  if (!animatin) {\n    return css``\n  }\n\n  const loading = keyframes`\n  0% {\n    background-position: 100% 50%\n  }\n\n  100% {\n    background-position: 0 50%\n  }\n  `\n  const gray = lightBGColor\n  const darkGray = darkBGColor\n\n  return css({\n    background: `linear-gradient(90deg, ${gray} 20%, ${darkGray} 35%, ${gray} 65%)`,\n    backgroundSize: \"400% 100%\",\n    animation: `${loading} 1.5s linear infinite`,\n  })\n}\n\nexport function applyLineStyle(width?: number | string): SerializedStyles {\n  return css`\n    &:not(:last-child) {\n      margin-bottom: 16px;\n    }\n    width: ${width}px;\n    height: 16px;\n    background-color: ${lightBGColor}px;\n  `\n}\n\nexport const textContainerStyle = css({\n  listStyle: \"none\",\n  padding: 0,\n  margin: 0,\n})\n\nexport function applyImageStyle({\n  shape = \"circle\",\n  size = \"medium\",\n}: SkeletonImageProps): SerializedStyles {\n  return css([\n    css`\n      background-color: ${lightBGColor};\n    `,\n    applyImageSize(size),\n    applyImageShape(shape),\n  ])\n}\n\nfunction applyImageSize(size: ImageSize): SerializedStyles {\n  let width\n\n  if (typeof size === \"number\") {\n    width = size\n  } else {\n    const sizeMap = {\n      small: 36,\n      medium: 48,\n      large: 60,\n    }\n\n    width = sizeMap[size]\n  }\n\n  return css`\n    width: ${width}px;\n    height: ${width}px;\n  `\n}\n\nfunction applyImageShape(shape: ImageShape): SerializedStyles {\n  return shape === \"circle\"\n    ? css`\n        border-radius: 50%;\n      `\n    : css``\n}\n","import { isArray } from \"@illa-design/system\"\nimport { SkeletonTextProps } from \"./interface\"\nimport { applyAnimation, applyLineStyle, textContainerStyle } from \"./style\"\nimport { applyBoxStyle, deleteCssProps } from \"@illa-design/theme\"\n\nexport function SkeletonText(props: SkeletonTextProps) {\n  const { rows = 3, width = \"80%\", animation, ...restProps } = props\n\n  const lines = Array.from({ length: rows }, (_, idx) => {\n    let lineWidth\n\n    if (isArray(width)) {\n      lineWidth = width[idx]\n    } else if (idx === rows - 1) {\n      lineWidth = width\n    }\n\n    return (\n      <li\n        key={idx}\n        css={[applyLineStyle(lineWidth), applyAnimation(animation)]}\n      />\n    )\n  })\n\n  return (\n    <ul\n      css={[textContainerStyle, applyBoxStyle(props)]}\n      {...deleteCssProps(restProps)}\n    >\n      {lines}\n    </ul>\n  )\n}\n\nSkeletonText.displayName = \"SkeletonText\"\n","import { SkeletonImageProps } from \"./interface\"\nimport { applyAnimation, applyImageStyle } from \"./style\"\nimport { applyBoxStyle, deleteCssProps } from \"@illa-design/theme\"\n\nexport function SkeletonImage(props: SkeletonImageProps) {\n  const { shape = \"circle\", size = \"medium\", animation, ...restProps } = props\n\n  return (\n    <div\n      css={[\n        applyImageStyle({ shape, size }),\n        applyAnimation(animation),\n        applyBoxStyle(props),\n      ]}\n      {...deleteCssProps(restProps)}\n    />\n  )\n}\n\nSkeletonImage.displayName = \"SkeletonImage\"\n","import { forwardRef, useMemo } from \"react\"\nimport { isObject } from \"@illa-design/system\"\nimport {\n  SkeletonImageProps,\n  SkeletonProps,\n  SkeletonTextProps,\n} from \"./interface\"\nimport { SkeletonText } from \"./skeleton-text\"\nimport { SkeletonImage } from \"./skeleton-image\"\nimport { skeletonImageStyle, skeletonStyle, skeletonTextStyle } from \"./style\"\nimport { applyBoxStyle, deleteCssProps } from \"@illa-design/theme\"\n\nfunction getProps(props: boolean | Object) {\n  return isObject(props) ? props : {}\n}\n\nexport const Skeleton = forwardRef<HTMLDivElement, SkeletonProps>(\n  (props, ref) => {\n    const {\n      animation,\n      visible = true,\n      image,\n      text = true,\n      children,\n      ...restProps\n    } = props\n\n    const renderText = useMemo(() => {\n      if (!text) {\n        return <></>\n      }\n      const textProps = getProps(text) as SkeletonTextProps\n\n      return (\n        <SkeletonText\n          css={[skeletonTextStyle]}\n          animation={animation}\n          {...textProps}\n        />\n      )\n    }, [animation, text])\n\n    const renderImage = useMemo(() => {\n      if (!image) {\n        return null\n      }\n      const imageProps = getProps(image) as SkeletonImageProps\n\n      return (\n        <SkeletonImage\n          css={[skeletonImageStyle]}\n          animation={animation}\n          {...imageProps}\n        />\n      )\n    }, [animation, image])\n\n    return visible ? (\n      <div\n        ref={ref}\n        css={[skeletonStyle, applyBoxStyle(props)]}\n        {...deleteCssProps(restProps)}\n      >\n        {renderImage}\n        {renderText}\n      </div>\n    ) : (\n      <>{children}</>\n    )\n  },\n)\n\nSkeleton.displayName = \"Skeleton\"\n"],"names":["lightBGColor","darkBGColor","skeletonStyle","css","skeletonTextStyle","skeletonImageStyle","applyAnimation","animatin","loading","keyframes","gray","applyLineStyle","width","textContainerStyle","applyImageStyle","shape","size","applyImageSize","applyImageShape","SkeletonText","props","rows","animation","restProps","lines","_","idx","lineWidth","isArray","jsx","applyBoxStyle","deleteCssProps","SkeletonImage","getProps","isObject","Skeleton","forwardRef","ref","visible","image","text","children","renderText","useMemo","Fragment","textProps","renderImage","imageProps","jsxs"],"mappings":"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"}