{"version":3,"file":"checkbox-group.stories-5b25b5d7.js","sources":["../../../../packages/checkbox/src/checkbox-group.tsx"],"sourcesContent":["import {\n  Children,\n  cloneElement,\n  forwardRef,\n  PropsWithChildren,\n  ReactElement,\n} from \"react\"\nimport { isArray, useMergeValue } from \"@illa-design/system\"\nimport { CheckboxGroupProps, CheckboxOption, CheckboxProps } from \"./interface\"\nimport { SerializedStyles } from \"@emotion/react\"\nimport { Checkbox } from \"./checkbox\"\nimport {\n  applyCheckboxContainerHorizontal,\n  applyCheckboxContainerVertical,\n} from \"./style\"\nimport { CheckboxGroupContext } from \"./context\"\nimport { applyBoxStyle, deleteCssProps } from \"@illa-design/theme\"\n\nexport const CheckboxGroup = forwardRef<HTMLDivElement, CheckboxGroupProps>(\n  (props, ref) => {\n    const {\n      children,\n      options,\n      disabled,\n      value,\n      defaultValue,\n      direction = \"horizontal\",\n      spacing = direction === \"horizontal\" ? \"24px\" : \"16px\",\n      onChange,\n      colorScheme,\n      ...otherProps\n    } = props\n\n    const [currentValue, setCurrentValue] = useMergeValue<(string | number)[]>(\n      [],\n      {\n        value: value,\n        defaultValue: defaultValue,\n      },\n    )\n\n    let checkboxGroupCss: SerializedStyles\n    switch (direction) {\n      case \"vertical\":\n        checkboxGroupCss = applyCheckboxContainerVertical(spacing)\n        break\n      case \"horizontal\":\n        checkboxGroupCss = applyCheckboxContainerHorizontal(spacing)\n        break\n    }\n\n    return (\n      <div\n        css={[checkboxGroupCss, applyBoxStyle(props)]}\n        ref={ref}\n        {...deleteCssProps(otherProps)}\n      >\n        <CheckboxGroupContext.Provider value={props}>\n          {isArray(options)\n            ? options?.map((option, index) => {\n                if (typeof option === \"string\" || typeof option === \"number\") {\n                  return (\n                    <Checkbox\n                      key={index}\n                      value={option}\n                      disabled={disabled}\n                      colorScheme={colorScheme}\n                      onChange={(checked, event) => {\n                        let finalValue = []\n                        if (checked) {\n                          finalValue = [...currentValue, option]\n                        } else {\n                          finalValue = currentValue.filter((v) => v !== option)\n                        }\n                        if (value === undefined) {\n                          setCurrentValue(finalValue)\n                        }\n                        onChange?.(finalValue as [], event)\n                      }}\n                    >\n                      {option.toString()}\n                    </Checkbox>\n                  )\n                } else {\n                  const optionObject = option as CheckboxOption\n                  return (\n                    <Checkbox\n                      key={`${optionObject.value}-${index}`}\n                      value={optionObject.value}\n                      disabled={disabled ?? optionObject.disabled}\n                      colorScheme={colorScheme}\n                      onChange={(checked, event) => {\n                        let finalValue = []\n                        if (checked) {\n                          finalValue = [...currentValue, optionObject.value]\n                        } else {\n                          finalValue = currentValue.filter(\n                            (value) => value !== optionObject.value,\n                          )\n                        }\n                        if (value === undefined) {\n                          setCurrentValue(finalValue as [])\n                        }\n                        onChange?.(finalValue as [], event)\n                      }}\n                    >\n                      {optionObject.label}\n                    </Checkbox>\n                  )\n                }\n              })\n            : Children.map(children, (child, index) => {\n                const item = child as ReactElement<\n                  PropsWithChildren<CheckboxProps>\n                >\n                return cloneElement(item, {\n                  ...item.props,\n                  onChange: (checked, event) => {\n                    item.props.onChange?.(checked, event)\n                    let finalValue: (string | number)[] = []\n                    if (checked) {\n                      if (item.props.value) {\n                        finalValue = [...currentValue, item.props.value]\n                      }\n                    } else {\n                      finalValue = currentValue.filter(\n                        (value) => value !== item.props.value,\n                      )\n                    }\n                    if (value === undefined) {\n                      setCurrentValue(finalValue as [])\n                    }\n                    onChange?.(finalValue as [], event)\n                  },\n                } as CheckboxProps)\n              })}\n        </CheckboxGroupContext.Provider>\n      </div>\n    )\n  },\n)\n\nCheckboxGroup.displayName = \"CheckboxGroup\"\n"],"names":["CheckboxGroup","forwardRef","props","ref","children","options","disabled","value","defaultValue","direction","spacing","onChange","colorScheme","otherProps","currentValue","setCurrentValue","useMergeValue","checkboxGroupCss","applyCheckboxContainerVertical","applyCheckboxContainerHorizontal","jsx","applyBoxStyle","deleteCssProps","CheckboxGroupContext","isArray","option","index","Checkbox","checked","event","finalValue","v","optionObject","value2","Children","child","item","cloneElement","_b","_a"],"mappings":"4oBAkBO,MAAAA,EAAAC,EAAA,WAAsB,CAAAC,EAAAC,IAAA,CAEzB,KAAA,CAAM,SAAAC,EACJ,QAAAC,EACA,SAAAC,EACA,MAAAC,EACA,aAAAC,EACA,UAAAC,EAAA,aACY,QAAAC,EAAAD,IAAA,aAAA,OAAA,OACoC,SAAAE,EAChD,YAAAC,EACA,GAAAC,CACG,EAAAX,EAGL,CAAAY,EAAAC,CAAA,EAAAC,EAAwC,CAAA,EACrC,CACD,MAAAT,EACE,aAAAC,CACA,CACF,EAGF,IAAAS,EACA,OAAAR,EAAA,CAAmB,IAAA,WAEfQ,EAAAC,EAAAR,CAAA,EACA,MAAA,IAAA,aAEAO,EAAAE,EAAAT,CAAA,EACA,KAAA,CAGJ,OAAAU,EACE,MAAC,CAAA,IAAA,CAAAH,EAAAI,EAAAnB,CAAA,CAAA,EAC6C,IAAAC,EAC5C,GAAAmB,EAAAT,CAAA,EAC6B,SAAAO,EAAAG,EAAA,SAAA,CAAA,MAAArB,EAAA,SAAAsB,EAAAnB,CAAA,EAAAA,GAAA,YAAAA,EAAA,IAAA,CAAAoB,EAAAC,IAAA,CAKrB,GAAA,OAAAD,GAAA,UAAA,OAAAA,GAAA,SACE,OAAAL,EACEO,EAAC,CAAA,MAAAF,EAEQ,SAAAnB,EACP,YAAAM,EACA,SAAA,CAAAgB,EAAAC,IAAA,CAEE,IAAAC,EAAA,CAAA,EACAF,EACEE,EAAA,CAAA,GAAAhB,EAAAW,CAAA,EAEAK,EAAAhB,EAAA,OAAAiB,GAAAA,IAAAN,CAAA,EAEFlB,IAAA,QACEQ,EAAAe,CAAA,EAEFnB,GAAA,MAAAA,EAAAmB,EAAAD,EAAkC,EACpC,SAAAJ,EAAA,SAAA,CAEiB,EAAAC,CAjBZ,EAkBP,CAGF,MAAAM,EAAAP,EACA,OAAAL,EACEO,EAAC,CAAA,MAAAK,EAAA,MAEqB,SAAA1B,GAAA0B,EAAA,SACe,YAAApB,EACnC,SAAA,CAAAgB,EAAAC,IAAA,CAEE,IAAAC,EAAA,CAAA,EACAF,EACEE,EAAA,CAAA,GAAAhB,EAAAkB,EAAA,KAAA,EAEAF,EAAAhB,EAAA,OAA0BmB,GAAAA,IAAAD,EAAA,KACU,EAGtCzB,IAAA,QACEQ,EAAAe,CAAA,EAEFnB,GAAA,MAAAA,EAAAmB,EAAAD,EAAkC,EACpC,SAAAG,EAAA,KAEc,EAAA,GAAAA,EAAA,KAAA,IAAAN,CAAA,EAnBqB,CAoBrC,CAEJ,GAAAQ,EAAA,SAAA,IAAA9B,EAAA,CAAA+B,EAAAT,IAAA,CAGA,MAAAU,EAAAD,EAGA,OAAAE,EAAAA,aAAAD,EAAA,CAA0B,GAAAA,EAAA,MAChB,SAAA,CAAAR,EAAAC,IAAA,UAENS,GAAAC,EAAAH,EAAA,OAAA,WAAA,MAAAE,EAAA,KAAAC,EAAAX,EAAAC,GACA,IAAAC,EAAA,CAAA,EACAF,EACEQ,EAAA,MAAA,QACEN,EAAA,CAAA,GAAAhB,EAAAsB,EAAA,MAAA,KAAA,GAGFN,EAAAhB,EAAA,OAA0BmB,GAAAA,IAAAG,EAAA,MAAA,KACQ,EAGpC7B,IAAA,QACEQ,EAAAe,CAAA,EAEFnB,GAAA,MAAAA,EAAAmB,EAAAD,EAAkC,CACpC,CAAA,CACgB,CAAA,EAAA,CAE1B,CAAA,CACF,CAGN,EAEA7B,EAAA,YAAA;;;;;;;;;;;;;;;;;;;;"}