{"version":3,"file":"textarea.stories-814e302d.js","sources":["../../../../packages/input/src/autoSizeTextAreaHeight.tsx","../../../../packages/input/src/text-area.tsx"],"sourcesContent":["import { isNumber, isObject } from \"@illa-design/system\"\n\nconst mirrorTextAreaStyle = `\n  position: absolute;\n  min-height: 0 !important;\n  max-height: none;\n  height:0;\n  visibility: hidden;\n  z-index: -100;\n  top: 0;\n  right: 0;\n`\n\nconst mirrorTextAreaSizing = [\n  \"border-width\",\n  \"box-sizing\",\n  \"font-family\",\n  \"font-weight\",\n  \"font-size\",\n  \"font-variant\",\n  \"letter-spacing\",\n  \"line-height\",\n  \"padding-top\",\n  \"padding-bottom\",\n  \"padding-left\",\n  \"padding-right\",\n  \"text-indent\",\n  \"text-rendering\",\n  \"text-transform\",\n  \"width\",\n]\n\nlet mirrorTextArea: HTMLTextAreaElement\n\nfunction setMirrorTextArea(originTextArea: HTMLTextAreaElement): {\n  paddingSize: number\n  boxSizing: string\n  borderSize: number\n} {\n  if (!mirrorTextArea) {\n    mirrorTextArea = document.createElement(\"textarea\")\n    document.body.appendChild(mirrorTextArea)\n  }\n  const originStyle = window.getComputedStyle(originTextArea)\n  const originSizingStyle = `\n    ${mirrorTextAreaSizing\n      .map((attr) => `${attr}:${originStyle.getPropertyValue(attr)}`)\n      .join(\";\")}\n  `\n  mirrorTextArea.setAttribute(\n    \"style\",\n    `${mirrorTextAreaStyle}${originSizingStyle}`,\n  )\n  const paddingSize =\n    parseFloat(originStyle.getPropertyValue(\"padding-top\")) +\n    parseFloat(originStyle.getPropertyValue(\"padding-bottom\"))\n  const boxSizing = originStyle.getPropertyValue(\"box-sizing\")\n  const borderSize =\n    parseFloat(originStyle.getPropertyValue(\"border-top-width\")) +\n    parseFloat(originStyle.getPropertyValue(\"border-bottom-width\"))\n  return {\n    paddingSize,\n    boxSizing,\n    borderSize,\n  }\n}\n\nfunction autoSizeTextAreaHeight(\n  autoSize?: boolean | { minRows?: number; maxRows?: number },\n  node?: HTMLTextAreaElement,\n) {\n  const getRows = () => {\n    let minRows\n    let maxRows\n    if (isObject(autoSize)) {\n      minRows = (autoSize as any).minRows\n      maxRows = (autoSize as any).maxRows\n    }\n    return {\n      minRows,\n      maxRows,\n    }\n  }\n  if (autoSize) {\n    const { minRows, maxRows } = getRows()\n    const originTextNode = node as HTMLTextAreaElement\n    const { paddingSize, boxSizing, borderSize } =\n      setMirrorTextArea(originTextNode)\n    mirrorTextArea.value =\n      originTextNode.value || originTextNode.placeholder || \"\"\n    let mirrorTextAreaHeight = mirrorTextArea.scrollHeight + borderSize\n    let minHeight\n    let maxHeight\n    let overflowY\n    if (minRows || maxRows) {\n      mirrorTextArea.value = \"\"\n      const singleRowHeight = mirrorTextArea.scrollHeight - paddingSize\n      if (isNumber(minRows)) {\n        minHeight = singleRowHeight * minRows\n        if (boxSizing === \"border-box\") {\n          minHeight += paddingSize\n          minHeight += borderSize\n        }\n        mirrorTextAreaHeight = Math.max(mirrorTextAreaHeight, minHeight)\n      }\n      if (isNumber(maxRows)) {\n        maxHeight = singleRowHeight * maxRows\n        if (boxSizing === \"border-box\") {\n          maxHeight += paddingSize\n          maxHeight += borderSize\n        }\n        overflowY = mirrorTextAreaHeight > maxHeight ? \"auto\" : \"\"\n        maxHeight = Math.min(mirrorTextAreaHeight, maxHeight)\n      }\n    }\n    const textAreaStyle: any = {}\n    textAreaStyle.height = mirrorTextAreaHeight\n    if (minHeight) {\n      textAreaStyle.minHeight = minHeight\n    }\n    if (maxHeight) {\n      textAreaStyle.maxHeight = maxHeight\n    }\n    if (overflowY) {\n      textAreaStyle.overflowY = overflowY\n    }\n    return textAreaStyle\n  }\n}\n\nexport default autoSizeTextAreaHeight\n","import {\n  CSSProperties,\n  forwardRef,\n  MutableRefObject,\n  useRef,\n  useState,\n} from \"react\"\nimport { TextAreaProps } from \"./interface\"\nimport {\n  applyInputDisabledStyle,\n  applyInputStyle,\n  applyMaxLengthBeforeStyle,\n  applyWordLimitStyle,\n  areaLimitStyle,\n  textareaContainerStyle,\n  textareaStyle,\n} from \"./style\"\nimport { mergeRefs, useMergeValue } from \"@illa-design/system\"\nimport { ClearIcon } from \"@illa-design/icon\"\nimport { applyBoxStyle, deleteCssProps, getColor } from \"@illa-design/theme\"\nimport autoSizeTextAreaHeight from \"./autoSizeTextAreaHeight\"\nimport { useIsomorphicLayoutEffect } from \"framer-motion\"\n\nexport const TextArea = forwardRef<HTMLDivElement, TextAreaProps>(\n  (props, ref) => {\n    const {\n      variant = \"outline\",\n      colorScheme = \"blue\",\n      textAreaRef,\n      allowClear,\n      disabled,\n      error,\n      defaultValue,\n      placeholder,\n      value,\n      autoSize,\n      maxLength,\n      onChange,\n      onClear,\n      onPressEnter,\n      readOnly,\n      bdRadius,\n      showWordLimit,\n      ...otherProps\n    } = props\n\n    let borderList = bdRadius?.split(\"\") ?? [\"8px\", \"8px\", \"8px\", \"8px\"]\n    if (borderList.length == 2) {\n      borderList = [borderList[0], borderList[1], borderList[0], borderList[1]]\n    } else if (borderList.length == 3) {\n      borderList = [borderList[0], borderList[1], borderList[2], borderList[1]]\n    }\n\n    const [finalError, setFinalError] = useMergeValue(false, {\n      defaultValue: false,\n      value: error,\n    })\n\n    const [finalValue, setFinalValue] = useMergeValue(\"\", {\n      defaultValue: defaultValue,\n      value: value,\n    })\n\n    const finalMaxLength = maxLength\n      ? typeof maxLength === \"number\"\n        ? maxLength\n        : maxLength.length\n      : undefined\n\n    const finalMaxLengthErrorOnly = maxLength\n      ? typeof maxLength === \"number\"\n        ? false\n        : maxLength.errorOnly\n      : undefined\n\n    const internalTextAreaRef =\n      useRef<HTMLTextAreaElement>() as MutableRefObject<HTMLTextAreaElement>\n\n    const [textAreaStyle, setTextAreaStyle] = useState<CSSProperties>({})\n\n    const resizeTextAreaHeight = () => {\n      const textAreaStyle = autoSizeTextAreaHeight(\n        props.autoSize,\n        internalTextAreaRef.current,\n      )\n      if (textAreaStyle) {\n        setTextAreaStyle(textAreaStyle)\n      }\n    }\n\n    useIsomorphicLayoutEffect(() => {\n      resizeTextAreaHeight()\n    }, [finalValue])\n\n    return (\n      <div\n        ref={ref}\n        css={[textareaContainerStyle, applyBoxStyle(otherProps)]}\n        {...deleteCssProps(otherProps)}\n      >\n        <textarea\n          disabled={disabled}\n          ref={mergeRefs(internalTextAreaRef, textAreaRef)}\n          value={finalValue}\n          style={textAreaStyle}\n          maxLength={finalMaxLengthErrorOnly ? undefined : finalMaxLength}\n          onChange={(e) => {\n            onChange?.(e.target.value, e)\n            if (finalMaxLength && e.target.value.length > finalMaxLength) {\n              if (finalMaxLengthErrorOnly) {\n                if (error === undefined) {\n                  setFinalError(true)\n                }\n              }\n            } else {\n              if (error === undefined) {\n                setFinalError(false)\n              }\n            }\n            if (value === undefined) {\n              setFinalValue(e.target.value)\n            }\n          }}\n          readOnly={readOnly}\n          placeholder={placeholder}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              if (onPressEnter) {\n                onPressEnter?.(e)\n                e.preventDefault()\n              }\n            }\n          }}\n          css={[\n            disabled\n              ? applyInputDisabledStyle(\n                  \"medium\",\n                  variant,\n                  colorScheme,\n                  finalError,\n                  false,\n                  false,\n                  borderList,\n                )\n              : applyInputStyle(\n                  \"medium\",\n                  variant,\n                  colorScheme,\n                  finalError,\n                  false,\n                  false,\n                  borderList,\n                ),\n            textareaStyle,\n          ]}\n        />\n        {allowClear &&\n          !readOnly &&\n          !disabled &&\n          finalValue &&\n          finalValue?.length > 0 && (\n            <ClearIcon\n              className=\"clear\"\n              onClick={(e) => {\n                onClear?.()\n                if (value === undefined) {\n                  setFinalValue(\"\")\n                }\n                onChange?.(\"\", e)\n              }}\n              pos=\"absolute\"\n              posT=\"10px\"\n              posR=\"5px\"\n              cursor=\"pointer\"\n              fs=\"12px\"\n              ml=\"4px\"\n              z={3}\n              c={getColor(\"grayBlue\", \"06\")}\n            />\n          )}\n        {showWordLimit && (\n          <span css={[applyWordLimitStyle(\"medium\"), areaLimitStyle]}>\n            <span css={applyMaxLengthBeforeStyle(finalError)}>\n              {finalValue?.length ?? 0}\n            </span>\n            {`${finalMaxLength !== undefined ? \"/\" + finalMaxLength : \"\"}`}\n          </span>\n        )}\n      </div>\n    )\n  },\n)\n\nTextArea.displayName = \"TextArea\"\n"],"names":["mirrorTextAreaStyle","mirrorTextAreaSizing","mirrorTextArea","setMirrorTextArea","originTextArea","originStyle","originSizingStyle","attr","paddingSize","boxSizing","borderSize","autoSizeTextAreaHeight","autoSize","node","getRows","minRows","maxRows","isObject","originTextNode","mirrorTextAreaHeight","minHeight","maxHeight","overflowY","singleRowHeight","isNumber","textAreaStyle","TextArea","forwardRef","props","ref","variant","colorScheme","textAreaRef","allowClear","disabled","error","defaultValue","placeholder","value","maxLength","onChange","onClear","onPressEnter","readOnly","bdRadius","showWordLimit","otherProps","borderList","finalError","setFinalError","useMergeValue","finalValue","setFinalValue","finalMaxLength","finalMaxLengthErrorOnly","internalTextAreaRef","useRef","setTextAreaStyle","useState","resizeTextAreaHeight","textAreaStyle2","useIsomorphicLayoutEffect","jsxs","textareaContainerStyle","applyBoxStyle","deleteCssProps","jsx","mergeRefs","e","applyInputDisabledStyle","applyInputStyle","textareaStyle","ClearIcon","getColor","applyWordLimitStyle","areaLimitStyle","applyMaxLengthBeforeStyle"],"mappings":"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"}