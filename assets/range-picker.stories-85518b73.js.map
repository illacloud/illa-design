{"version":3,"file":"range-picker.stories-85518b73.js","sources":["../../../../packages/time-picker/src/popup/range-picker-body.tsx","../../../../packages/time-picker/src/input/rangeInput.tsx","../../../../packages/time-picker/src/range-picker.tsx"],"sourcesContent":["import { FC, useCallback, useContext } from \"react\"\nimport { RangeTimePickerPopupProps } from \"./interface\"\nimport { PickerContext } from \"../context\"\nimport { TimePickerPopup } from \"./time-picker-body\"\nimport {\n  DayjsPro,\n  isDayjs,\n  omit,\n  toLocal,\n  toTimezone,\n} from \"@illa-design/system\"\n\nexport const RangePickerBody: FC<RangeTimePickerPopupProps> = (props) => {\n  const {\n    format = \"HH:mm:ss\",\n    onSelect,\n    focusedInputIndex = 0,\n    changeFocusedInputIndex,\n    popupVisible,\n    onConfirmValue,\n    valueShow = [],\n    setValueShow,\n    disableConfirm,\n    ...rest\n  } = props\n\n  const { utcOffset, timezone } = useContext(PickerContext)\n\n  const onSelectTime = useCallback(\n    (_: string, time: DayjsPro) => {\n      const zoneValue = valueShow.slice()\n      const v = valueShow.map((a) => toLocal(a, utcOffset, timezone))\n\n      zoneValue[focusedInputIndex] = toTimezone(time, utcOffset, timezone)\n      v[focusedInputIndex] = time\n\n      onSelect &&\n        onSelect(\n          v.map((t) => t.format(format)),\n          v,\n        )\n\n      setValueShow?.(zoneValue)\n\n      if (\n        disableConfirm &&\n        Array.isArray(v) &&\n        isDayjs(v[0]) &&\n        isDayjs(v[1])\n      ) {\n        onConfirmValue?.(zoneValue)\n      }\n    },\n    [\n      disableConfirm,\n      focusedInputIndex,\n      format,\n      onConfirmValue,\n      onSelect,\n      setValueShow,\n      timezone,\n      utcOffset,\n      valueShow,\n    ],\n  )\n\n  const onConfirmValueInner = useCallback(() => {\n    if (\n      valueShow.length &&\n      (valueShow[0] === undefined || valueShow[1] === undefined)\n    ) {\n      changeFocusedInputIndex?.(focusedInputIndex === 0 ? 1 : 0)\n    } else {\n      onConfirmValue?.(valueShow)\n    }\n  }, [changeFocusedInputIndex, focusedInputIndex, onConfirmValue, valueShow])\n\n  const timepickerProps = omit(rest, [\n    \"defaultValue\",\n    \"placeholder\",\n    \"value\",\n    \"onChange\",\n  ])\n  const currentShowValue = valueShow[focusedInputIndex]\n\n  return (\n    <TimePickerPopup\n      onSelect={onSelectTime}\n      value={currentShowValue}\n      format={format}\n      isRangePicker\n      onConfirmValue={onConfirmValueInner}\n      confirmBtnDisabled={!isDayjs(currentShowValue)}\n      valueShow={currentShowValue}\n      popupVisible={popupVisible}\n      disableConfirm={disableConfirm}\n      {...timepickerProps}\n    />\n  )\n}\n","import {\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n  KeyboardEvent,\n  useCallback,\n  ChangeEvent,\n} from \"react\"\nimport { ClearIcon } from \"@illa-design/icon\"\nimport { omit } from \"@illa-design/system\"\nimport { DateInputRangeHandler, DateInputRangeProps } from \"./interface\"\nimport {\n  applyInputWrapperStyle,\n  applyPrefixStyle,\n  applyRangeInputStyle,\n  applyRealInputStyle,\n  baseSuffixStyle,\n  clearIconStyle,\n  separatorStyle,\n  suffixIconStyle,\n} from \"./style\"\n\nexport const RangeDateInput = forwardRef<\n  DateInputRangeHandler,\n  DateInputRangeProps\n>((props, ref) => {\n  const {\n    allowClear,\n    error,\n    disabled,\n    placeholder = [],\n    value = [],\n    popupVisible,\n    format,\n    size = \"medium\",\n    colorScheme = \"blue\",\n    onClear,\n    editable,\n    inputValue,\n    onPressEnter,\n    onPressTab,\n    onChange,\n    separator,\n    suffixIcon,\n    changeFocusedInputIndex,\n    focusedInputIndex,\n    isPlaceholder,\n    prefix,\n    ...rest\n  } = props\n\n  const input0 = useRef<HTMLInputElement>(null)\n  const input1 = useRef<HTMLInputElement>(null)\n\n  const disabled1 = Array.isArray(disabled) ? disabled[0] : disabled\n  const disabled2 = Array.isArray(disabled) ? disabled[1] : disabled\n\n  const readOnlyProps = editable ? {} : { readOnly: true }\n\n  useImperativeHandle(ref, () => ({\n    focus: (index?: number) => {\n      const focusedIndex = typeof index === \"number\" ? index : focusedInputIndex\n      const focusElement = focusedIndex === 0 ? input0 : input1\n      if (\n        (focusedInputIndex === 0 && !disabled1) ||\n        (focusedInputIndex === 1 && !disabled2)\n      ) {\n        focusElement.current &&\n          focusElement.current.focus &&\n          focusElement.current.focus()\n      }\n    },\n    blur: () => {\n      if (focusedInputIndex === 0) {\n        input0.current && input0.current.blur && input0.current.blur()\n      }\n      if (focusedInputIndex === 1) {\n        input1.current && input1.current.blur && input1.current.blur()\n      }\n    },\n  }))\n\n  const changeFocusedInput = useCallback(\n    (index: number) => {\n      if (focusedInputIndex !== index) {\n        changeFocusedInputIndex?.(index)\n      }\n    },\n    [changeFocusedInputIndex, focusedInputIndex],\n  )\n\n  const onKeyDown = useCallback(\n    (e: KeyboardEvent<HTMLInputElement>) => {\n      const keyCode = e.code\n      if (keyCode === \"Enter\") {\n        onPressEnter?.()\n      }\n      if (keyCode === \"Tab\") {\n        changeFocusedInput(Number(!focusedInputIndex))\n        onPressTab?.(e)\n      }\n    },\n    [changeFocusedInput, focusedInputIndex, onPressEnter, onPressTab],\n  )\n\n  function onChangeInput(e: ChangeEvent<HTMLInputElement>) {\n    e.stopPropagation()\n    onChange?.(e)\n  }\n\n  const getInputValue = useCallback(\n    (index: number) => {\n      const valueText = value[index] ? value[index].format(format) : \"\"\n      if (inputValue) {\n        return index === focusedInputIndex ? inputValue : valueText\n      }\n      return valueText\n    },\n    [focusedInputIndex, format, inputValue, value],\n  )\n\n  return (\n    <div\n      {...omit(rest, [\"onChange\", \"onPressEnter\"])}\n      css={applyInputWrapperStyle(\n        size,\n        colorScheme,\n        disabled1 && disabled2,\n        error,\n        allowClear && value.length === 2,\n      )}\n    >\n      {prefix && <div css={applyPrefixStyle(size)}>{prefix}</div>}\n      <div\n        css={applyRangeInputStyle(!!popupVisible && focusedInputIndex === 0)}\n      >\n        <input\n          ref={input0}\n          disabled={disabled1}\n          placeholder={placeholder[0]}\n          value={getInputValue(0)}\n          onChange={onChangeInput}\n          onKeyDown={onKeyDown}\n          onClick={() => changeFocusedInput(0)}\n          {...readOnlyProps}\n          css={applyRealInputStyle(size)}\n        />\n      </div>\n      <span css={separatorStyle}>{separator || \"-\"}</span>\n      <div\n        css={applyRangeInputStyle(!!popupVisible && focusedInputIndex === 1)}\n      >\n        <input\n          ref={input1}\n          disabled={disabled2}\n          placeholder={placeholder[1]}\n          value={getInputValue(1)}\n          onChange={onChangeInput}\n          onKeyDown={onKeyDown}\n          onClick={() => changeFocusedInput(1)}\n          {...readOnlyProps}\n          css={applyRealInputStyle(size)}\n        />\n      </div>\n      <div css={baseSuffixStyle}>\n        {allowClear && value.length === 2 && (\n          <span onClick={onClear} css={clearIconStyle} className=\"clear-icon\">\n            <ClearIcon />\n          </span>\n        )}\n        <span className=\"suffix-icon\" css={suffixIconStyle}>\n          {suffixIcon}\n        </span>\n      </div>\n    </div>\n  )\n})\n\nRangeDateInput.displayName = \"RangeDateInput\"\n","import {\n  useEffect,\n  useRef,\n  useState,\n  MouseEvent,\n  ChangeEvent,\n  forwardRef,\n} from \"react\"\nimport {\n  getDayjsValue,\n  toLocal,\n  toTimezone,\n  usePrevious,\n  isValidTimeString,\n  isDayjsArrayChange,\n  getSortedDayjsArray,\n} from \"@illa-design/system\"\nimport { PickerContext } from \"./context\"\nimport { Trigger } from \"@illa-design/trigger\"\nimport { RangePickerProps } from \"./\"\nimport { TimeIcon } from \"@illa-design/icon\"\nimport { getDefaultValue, getFormat, getFormatTime } from \"./utils\"\nimport { RangePickerBody } from \"./popup/range-picker-body\"\nimport { RangeDateInput } from \"./input/rangeInput\"\nimport { DateInputRangeHandler } from \"./input/interface\"\nimport { applyBoxStyle } from \"@illa-design/theme\"\nimport type { Dayjs } from \"dayjs\"\n\nexport const RangePicker = forwardRef<HTMLDivElement, RangePickerProps>(\n  (props, ref) => {\n    const {\n      allowClear = true,\n      disableConfirm,\n      placeholder,\n      disabled,\n      position = \"bottom-start\",\n      error,\n      triggerProps,\n      value: propsValue,\n      onChange,\n      icons,\n      size = \"medium\",\n      colorScheme = \"blue\",\n      editable = true,\n      utcOffset,\n      timezone,\n      format = \"HH:mm:ss\",\n      scrollSticky = true,\n      order = true,\n      readonly = false,\n    } = props\n\n    const suffixIcon = (icons && icons.inputSuffix) || <TimeIcon />\n\n    const _format = getFormat(format)\n\n    const [popupVisible, setPopupVisible] = useState<boolean>(false)\n    const [value, setValue] = useState<Dayjs[] | undefined>(\n      getDefaultValue(\n        _format,\n        props.value,\n        props.defaultValue,\n        utcOffset,\n        timezone,\n      ) as Dayjs[],\n    )\n    const [valueShow, setValueShow] = useState<Dayjs[]>()\n    const [inputValue, setInputValue] = useState<string>()\n    const [focusedInputIndex, setFocusedInputIndex] = useState<number>(0)\n\n    const mergedValue =\n      \"value\" in props\n        ? (getDayjsValue(\n            propsValue as Dayjs[],\n            format,\n            utcOffset,\n            timezone,\n          ) as Dayjs[])\n        : value\n    const mergedPopupVisible =\n      \"popupVisible\" in props ? props.popupVisible : popupVisible\n\n    const previousUtcOffset = usePrevious(utcOffset)\n    const previousTimezone = usePrevious(timezone)\n\n    const isDidMount = useRef<boolean>(false)\n\n    useEffect(() => {\n      if (isDidMount.current) {\n        if (\n          value &&\n          (previousUtcOffset !== utcOffset || timezone !== previousTimezone)\n        ) {\n          const localValue = value.map((v) =>\n            toLocal(v, previousUtcOffset, previousTimezone),\n          )\n          const zoneValue = localValue.map((lc) =>\n            toTimezone(lc, utcOffset, timezone),\n          )\n          setValue(zoneValue)\n        }\n      } else {\n        isDidMount.current = true\n      }\n    }, [previousTimezone, previousUtcOffset, timezone, utcOffset, value])\n\n    const refInput = useRef<DateInputRangeHandler>(null)\n\n    const focusInput = (index?: number) => {\n      refInput.current?.focus?.(index)\n    }\n\n    const changeFocusedInputIndex = (index: number) => {\n      setFocusedInputIndex(index)\n      window.setTimeout(() => focusInput(index))\n    }\n\n    const onHandleChange = (vs?: Dayjs[]) => {\n      if (Array.isArray(vs) && isDayjsArrayChange(mergedValue as Dayjs[], vs)) {\n        onChange?.(\n          vs.map((t) => toLocal(t, utcOffset, timezone).format(format)),\n          vs.map((t) => toLocal(t, utcOffset, timezone)),\n        )\n      }\n    }\n\n    const onVisibleChange = (visible: boolean) => {\n      if (visible) {\n        setOpen(visible, () => {\n          setTimeout(() => focusInput())\n        })\n      } else {\n        setOpen(false)\n      }\n    }\n\n    const setOpen = (visible: boolean, callback?: () => void) => {\n      setPopupVisible(visible)\n      setInputValue(undefined)\n      callback?.()\n      if (!visible) {\n        setValueShow(undefined)\n      }\n    }\n\n    const onConfirmValue = (vs?: Dayjs[]) => {\n      const newValue =\n        order && Array.isArray(vs)\n          ? getSortedDayjsArray(vs.map((v) => getFormatTime(v)))\n          : vs\n      setValue(newValue)\n      setValueShow(undefined)\n      setInputValue(undefined)\n\n      onHandleChange(newValue)\n\n      if (!disableConfirm) {\n        setOpen(false)\n      }\n    }\n\n    const onPressEnter = () => {\n      if (Array.isArray(valueShow) && valueShow.length) {\n        if (inputValue && !isValidTimeString(inputValue, format)) {\n          setOpen(false)\n        } else if (valueShow[0] === undefined || valueShow[1] === undefined) {\n          changeFocusedInputIndex(focusedInputIndex === 0 ? 1 : 0)\n        } else if (valueShow.length === 2) {\n          onConfirmValue(valueShow)\n        }\n      } else {\n        setOpen(false)\n      }\n    }\n\n    const onClear = (e: MouseEvent<HTMLSpanElement>) => {\n      e.stopPropagation()\n      onConfirmValue(undefined)\n      onChange?.(undefined, undefined)\n      props.onClear?.()\n    }\n\n    const confirmInputValue = (newInputValue?: string) => {\n      const newInputDayjs = getDayjsValue(newInputValue, format) as Dayjs\n      const newValueShow = [\n        ...(Array.isArray(valueShow) ? valueShow : (value as Dayjs[]) || []),\n      ]\n      if (isValidTimeString(newInputValue, format)) {\n        newValueShow[focusedInputIndex] = newInputDayjs\n        const localDayjsArray = newValueShow.map((nv) =>\n          toLocal(nv, utcOffset, timezone),\n        )\n        props.onSelect &&\n          props.onSelect(\n            localDayjsArray.map((la) => la && la.format(format)),\n            localDayjsArray,\n          )\n        setValueShow(newValueShow)\n        setInputValue(undefined)\n      }\n    }\n\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n      const newInputValue = e.target.value\n      if (!popupVisible) {\n        setPopupVisible(true)\n      }\n      setInputValue(newInputValue)\n      confirmInputValue(newInputValue)\n    }\n\n    return (\n      <PickerContext.Provider value={{ utcOffset, timezone }}>\n        <Trigger\n          trigger=\"click\"\n          position={position}\n          disabled={disabled || readonly}\n          popupVisible={mergedPopupVisible}\n          onVisibleChange={onVisibleChange}\n          colorScheme=\"white\"\n          content={\n            <RangePickerBody\n              {...props}\n              format={_format}\n              onConfirmValue={onConfirmValue}\n              setValueShow={setValueShow}\n              valueShow={valueShow || mergedValue}\n              value={mergedValue}\n              popupVisible={mergedPopupVisible}\n              scrollSticky={scrollSticky}\n              focusedInputIndex={focusedInputIndex}\n              changeFocusedInputIndex={changeFocusedInputIndex}\n            />\n          }\n          showArrow={false}\n          {...triggerProps}\n        >\n          <div css={applyBoxStyle(props)} ref={ref}>\n            <RangeDateInput\n              popupVisible={mergedPopupVisible}\n              format={_format}\n              disabled={disabled}\n              error={error}\n              size={size}\n              onPressEnter={onPressEnter}\n              onClear={onClear}\n              suffixIcon={suffixIcon}\n              editable={editable || !readonly}\n              allowClear={allowClear}\n              ref={refInput}\n              placeholder={placeholder}\n              value={valueShow || mergedValue}\n              inputValue={inputValue}\n              onChange={onChangeInput}\n              colorScheme={colorScheme}\n              changeFocusedInputIndex={changeFocusedInputIndex}\n              focusedInputIndex={focusedInputIndex}\n            />\n          </div>\n        </Trigger>\n      </PickerContext.Provider>\n    )\n  },\n)\n\nRangePicker.displayName = \"RangePicker\"\n"],"names":["RangePickerBody","props","format","onSelect","focusedInputIndex","changeFocusedInputIndex","popupVisible","onConfirmValue","valueShow","setValueShow","disableConfirm","rest","utcOffset","timezone","useContext","PickerContext","onSelectTime","useCallback","_","time","zoneValue","v","a","toLocal","toTimezone","t","isDayjs","onConfirmValueInner","timepickerProps","omit","currentShowValue","jsx","TimePickerPopup","RangeDateInput","forwardRef","ref","allowClear","error","disabled","placeholder","value","size","colorScheme","onClear","editable","inputValue","onPressEnter","onPressTab","onChange","separator","suffixIcon","isPlaceholder","prefix","input0","useRef","input1","disabled1","disabled2","readOnlyProps","useImperativeHandle","index","focusElement","changeFocusedInput","onKeyDown","e","keyCode","onChangeInput","getInputValue","valueText","jsxs","applyInputWrapperStyle","applyPrefixStyle","applyRangeInputStyle","applyRealInputStyle","separatorStyle","baseSuffixStyle","clearIconStyle","ClearIcon","suffixIconStyle","RangePicker","position","triggerProps","propsValue","icons","scrollSticky","order","readonly","TimeIcon","_format","getFormat","setPopupVisible","useState","setValue","getDefaultValue","setInputValue","setFocusedInputIndex","mergedValue","getDayjsValue","mergedPopupVisible","previousUtcOffset","usePrevious","previousTimezone","isDidMount","useEffect","lc","refInput","focusInput","_b","_a","onHandleChange","vs","isDayjsArrayChange","onVisibleChange","visible","setOpen","callback","newValue","getSortedDayjsArray","getFormatTime","isValidTimeString","confirmInputValue","newInputValue","newInputDayjs","newValueShow","localDayjsArray","nv","la","Trigger","applyBoxStyle"],"mappings":"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"}