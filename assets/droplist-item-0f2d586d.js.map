{"version":3,"file":"droplist-item-0f2d586d.js","sources":["../../../../packages/dropdown/src/dropdown.tsx","../../../../packages/dropdown/src/style.ts","../../../../packages/dropdown/src/droplist.tsx","../../../../packages/dropdown/src/droplist-item.tsx"],"sourcesContent":["import { FC } from \"react\"\nimport { DropdownProps } from \"./interface\"\nimport { Trigger } from \"@illa-design/trigger\"\nimport { useMergeValue } from \"@illa-design/system\"\n\nexport const Dropdown: FC<DropdownProps> = (props) => {\n  const {\n    onFocus,\n    onBlur,\n    children,\n    colorScheme = \"white\",\n    dropList,\n    disabled,\n    position = \"bottom-start\",\n    triggerProps,\n    trigger = \"click\",\n    defaultPopupVisible,\n    autoAlignPopupWidth,\n    popupVisible,\n    onVisibleChange,\n    ...otherProps\n  } = props\n\n  const [currentPopupVisible, setCurrentPopupVisible] = useMergeValue(false, {\n    defaultValue: defaultPopupVisible,\n    value: popupVisible,\n  })\n\n  const changePopupVisible = (visible: boolean) => {\n    if (popupVisible === undefined) {\n      setCurrentPopupVisible(visible)\n    }\n    onVisibleChange?.(visible)\n  }\n\n  return (\n    <Trigger\n      onFocus={onFocus}\n      onBlur={onBlur}\n      trigger={trigger}\n      colorScheme={colorScheme}\n      autoAlignPopupWidth={autoAlignPopupWidth}\n      withoutPadding={true}\n      clickOutsideToClose={true}\n      closeOnInnerClick={true}\n      position={position}\n      showArrow={false}\n      alignPoint={trigger === \"contextmenu\"}\n      popupVisible={currentPopupVisible}\n      content={dropList}\n      onVisibleChange={(visible: boolean) => {\n        changePopupVisible(visible)\n      }}\n      disabled={disabled}\n      {...triggerProps}\n      {...otherProps}\n    >\n      {children}\n    </Trigger>\n  )\n}\n\nDropdown.displayName = \"Dropdown\"\n","import { css, SerializedStyles } from \"@emotion/react\"\nimport {\n  getColor,\n  getSpecialThemeColor,\n  globalColor,\n  hasNineStepColor,\n  illaPrefix,\n} from \"@illa-design/theme\"\nimport { TriggerColorScheme } from \"@illa-design/trigger\"\n\nexport function applyListCss(): SerializedStyles {\n  return css`\n    position: relative;\n    border-radius: 8px;\n    overflow: auto;\n    background-color: ${globalColor(`--${illaPrefix}-white-01`)};\n    padding: 8px 0;\n  `\n}\n\nexport function applyItemCss(\n  colorScheme: TriggerColorScheme,\n  hoverColorScheme: TriggerColorScheme,\n  isDisabled?: boolean,\n  selected?: boolean,\n  deleted?: boolean,\n): SerializedStyles {\n  const hoverCss = css`\n    color: ${deleted ? getColor(\"red\", \"03\") : getColor(\"grayBlue\", \"02\")};\n\n    &:hover {\n      cursor: pointer;\n      background-color: ${deleted\n        ? getColor(\"red\", \"07\")\n        : getColor(\n            hoverColorScheme,\n            hasNineStepColor(hoverColorScheme) ? \"09\" : \"08\",\n          )};\n    }\n  `\n\n  const disabledCss = css`\n    cursor: not-allowed;\n    color: ${globalColor(`--${illaPrefix}-grayBlue-05`)};\n  `\n\n  const selectedStyle = css`\n    color: ${getSpecialThemeColor(colorScheme)};\n    background: ${getColor(colorScheme, \"08\")};\n  `\n\n  let finalStyle\n\n  if (selected) {\n    finalStyle = selectedStyle\n  } else {\n    if (isDisabled) {\n      finalStyle = disabledCss\n    } else {\n      finalStyle = hoverCss\n    }\n  }\n\n  return css`\n    font-size: 14px;\n    line-height: 32px;\n    text-overflow: ellipsis;\n    overflow-wrap: break-word;\n    padding: 0 16px;\n    ${finalStyle};\n  `\n}\n","import { createContext, forwardRef, MouseEvent, ReactNode } from \"react\"\nimport { DropListProps } from \"./interface\"\nimport { applyListCss } from \"./style\"\nimport { applyBoxStyle, deleteCssProps } from \"@illa-design/theme\"\nimport { TriggerColorScheme } from \"@illa-design/trigger\"\n\nexport const DropListContext = createContext<{\n  onClickItem?: (\n    key: string | number,\n    clickedNode: ReactNode,\n    event: MouseEvent,\n  ) => void\n  hoverColorScheme?: TriggerColorScheme\n}>({})\n\nexport const DropList = forwardRef<HTMLDivElement, DropListProps>(\n  (props, ref) => {\n    const {\n      children,\n      onClickItem,\n      hoverColorScheme = \"grayBlue\",\n      ...otherProps\n    } = props\n\n    return (\n      <div\n        ref={ref}\n        css={[applyListCss(), applyBoxStyle(props)]}\n        {...deleteCssProps(otherProps)}\n      >\n        <DropListContext.Provider\n          value={{\n            onClickItem,\n            hoverColorScheme,\n          }}\n        >\n          {children}\n        </DropListContext.Provider>\n      </div>\n    )\n  },\n)\n\nDropList.displayName = \"DropList\"\n","import { forwardRef, useContext } from \"react\"\nimport { DropListItemProps } from \"./interface\"\nimport { DropListContext } from \"./droplist\"\nimport { applyItemCss } from \"./style\"\nimport { deleteCssProps } from \"@illa-design/theme\"\n\nexport const DropListItem = forwardRef<HTMLDivElement, DropListItemProps>(\n  (props, ref) => {\n    const {\n      title,\n      children,\n      disabled,\n      onClick,\n      colorScheme = \"blue\",\n      hoverColorScheme,\n      deleted,\n      selected,\n      value,\n      isSelectOption = true,\n      ...otherProps\n    } = props\n\n    const {\n      onClickItem,\n      hoverColorScheme: contextHoverColorScheme = \"grayBlue\",\n    } = useContext(DropListContext)\n    const finalHoverColorScheme = hoverColorScheme ?? contextHoverColorScheme\n\n    return (\n      <div\n        ref={ref}\n        css={applyItemCss(\n          colorScheme,\n          finalHoverColorScheme,\n          disabled,\n          selected,\n          deleted,\n        )}\n        onClick={(event) => {\n          if (disabled) return\n          onClick?.(event)\n          if (isSelectOption) {\n            onClickItem?.(value, title ? title : children, event)\n          }\n        }}\n        {...deleteCssProps(otherProps)}\n      >\n        {title ? title : children}\n      </div>\n    )\n  },\n)\n\nDropListItem.displayName = \"DropListItem\"\n"],"names":["Dropdown","props","onFocus","onBlur","children","colorScheme","dropList","disabled","position","triggerProps","trigger","defaultPopupVisible","autoAlignPopupWidth","popupVisible","onVisibleChange","otherProps","currentPopupVisible","setCurrentPopupVisible","useMergeValue","changePopupVisible","visible","jsx","Trigger","applyListCss","css","globalColor","illaPrefix","applyItemCss","hoverColorScheme","isDisabled","selected","deleted","hoverCss","getColor","hasNineStepColor","disabledCss","selectedStyle","getSpecialThemeColor","finalStyle","DropListContext","createContext","DropList","forwardRef","ref","onClickItem","applyBoxStyle","deleteCssProps","DropListItem","title","onClick","value","isSelectOption","contextHoverColorScheme","useContext","event"],"mappings":"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"}