{"version":3,"file":"pagination.stories-453ec81d.js","sources":["../../../../packages/pagination/src/style.ts","../../../../packages/pagination/src/pagination.tsx"],"sourcesContent":["import { css, SerializedStyles } from \"@emotion/react\"\nimport {\n  getColor,\n  getColorShadow,\n  getSpecialThemeColor,\n} from \"@illa-design/theme\"\nimport { PaginationSize } from \"./interface\"\n\nexport const paginationContainer = css`\n  display: inline-flex;\n  flex-direction: row;\n  align-items: center;\n`\n\nexport const totalStyle = css`\n  font-size: 14px;\n  margin-right: 8px;\n  color: ${getColor(\"grayBlue\", \"02\")};\n`\n\nexport function applyJumperStyle(disabled?: boolean): SerializedStyles {\n  return css`\n    font-size: 14px;\n    margin-left: 8px;\n    margin-right: 16px;\n    white-space: nowrap;\n    color: ${disabled\n      ? getColor(\"grayBlue\", \"07\")\n      : getColor(\"grayBlue\", \"02\")};\n  `\n}\n\nexport const jumperContainerStyle = css`\n  display: inline-flex;\n  align-items: center;\n  flex-direction: row;\n`\n\nexport const selectorContainerStyle = css`\n  display: inline-flex;\n  flex-direction: row;\n  align-items: center;\n`\n\nexport function applySimpleTextStyle(\n  marginStyle?: SerializedStyles,\n  disabled?: boolean,\n): SerializedStyles {\n  let textColor = css`\n    color: ${getColor(\"grayBlue\", \"02\")};\n  `\n  if (disabled) {\n    textColor = css`\n      color: ${getColor(\"grayBlue\", \"07\")};\n    `\n  }\n\n  return css`\n    font-size: 14px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    cursor: ${disabled ? \"not-allowed\" : \"auto\"};\n    ${marginStyle};\n    ${textColor};\n  `\n}\n\nexport function applyDirectorIconStyle(\n  marginStyle?: SerializedStyles,\n  size?: PaginationSize,\n  disabled?: boolean,\n  activeColorScheme?: string | undefined,\n  active?: boolean,\n): SerializedStyles {\n  let textColor = css`\n    color: ${active\n      ? getSpecialThemeColor(activeColorScheme ?? \"blue\")\n      : getColor(\"grayBlue\", \"02\")};\n  `\n  let bgColor = css`\n    background-color: ${active\n      ? getColor(activeColorScheme ?? \"blue\", \"08\")\n      : \"unset\"};\n  `\n\n  if (disabled) {\n    textColor = css`\n      color: ${active\n        ? getColor(activeColorScheme ?? \"blue\", \"05\")\n        : getColor(\"grayBlue\", \"07\")};\n    `\n    bgColor = css`\n      background-color: ${active\n        ? activeColorScheme\n          ? getColor(activeColorScheme, \"07\")\n          : getColor(\"grayBlue\", \"09\")\n        : \"unset\"};\n    `\n  }\n\n  let hoverStyle = css``\n\n  if (!disabled && !active) {\n    hoverStyle = css`\n      &:hover {\n        background-color: ${getColor(\"grayBlue\", \"09\")};\n      }\n    `\n  }\n\n  let s = \"32px\"\n\n  switch (size) {\n    case \"small\":\n      s = \"24px\"\n      break\n    case \"medium\":\n      s = \"32px\"\n      break\n    case \"large\":\n      s = \"40px\"\n      break\n  }\n\n  return css`\n    font-size: 14px;\n    width: ${s};\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    height: ${s};\n    border-radius: 4px;\n    cursor: ${disabled ? \"not-allowed\" : \"pointer\"};\n    ${marginStyle};\n    ${textColor};\n    ${bgColor};\n    ${hoverStyle};\n  `\n}\n\nexport function applySelectorInputStyle(\n  size: PaginationSize,\n  inputBorderColorScheme?: string,\n): SerializedStyles {\n  let s = \"32px\"\n\n  switch (size) {\n    case \"small\":\n      s = \"24px\"\n      break\n    case \"medium\":\n      s = \"32px\"\n      break\n    case \"large\":\n      s = \"40px\"\n      break\n  }\n\n  return css`\n    font-family: inherit;\n    font-size: 14px;\n    color: ${getColor(\"grayBlue\", \"02\")};\n    width: ${s};\n    box-sizing: border-box;\n    text-align: center;\n    background-color: ${getColor(\"grayBlue\", \"09\")};\n    border-radius: 4px;\n    height: ${s};\n    outline: none;\n    border: none;\n\n    &:hover {\n      background-color: ${getColor(\"grayBlue\", \"08\")};\n    }\n\n    &:focus-within {\n      outline: none;\n      background: none;\n      border: 1px solid\n        ${inputBorderColorScheme\n          ? getSpecialThemeColor(inputBorderColorScheme)\n          : getColor(\"blue\", \"03\")};\n      box-shadow: 0 0 8px 0 ${getColorShadow(\"blue\", \"03\")};\n    }\n\n    &:disabled {\n      cursor: not-allowed;\n      color: ${getColor(\"grayBlue\", \"05\")};\n    }\n\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n    }\n\n    &[type=\"number\"] {\n      -moz-appearance: textfield;\n    }\n  `\n}\n","import * as React from \"react\"\nimport {\n  forwardRef,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\"\nimport { PaginationProps } from \"./interface\"\nimport {\n  applyDirectorIconStyle,\n  applyJumperStyle,\n  applySelectorInputStyle,\n  applySimpleTextStyle,\n  jumperContainerStyle,\n  paginationContainer,\n  selectorContainerStyle,\n  totalStyle,\n} from \"./style\"\nimport { isFunction, useMergeValue } from \"@illa-design/system\"\nimport {\n  ConfigProviderContext,\n  ConfigProviderProps,\n  def,\n} from \"@illa-design/config-provider\"\nimport { MoreIcon, NextIcon, PreviousIcon } from \"@illa-design/icon\"\nimport { css } from \"@emotion/react\"\nimport { Select } from \"@illa-design/select\"\nimport { applyBoxStyle, deleteCssProps } from \"@illa-design/theme\"\n\nexport const Pagination = forwardRef<HTMLDivElement, PaginationProps>(\n  (props, ref) => {\n    const {\n      disabled,\n      hideOnSinglePage,\n      pageSizeChangeResetCurrent,\n      showJumper,\n      showMore,\n      simple,\n      disableSimplePageJump,\n      sizeCanChange,\n      bufferSize = 0,\n      current,\n      defaultCurrent,\n      pageSize,\n      pageSizeOptions,\n      defaultPageSize,\n      total = 0,\n      itemRender,\n      size = \"medium\",\n      icons,\n      onChange,\n      onPageSizeChange,\n      showTotal,\n      inputBorderColorScheme,\n      activeColorScheme,\n      ...otherProps\n    } = props\n\n    const startAndEndBuffer = 5\n\n    const configProviderProps = useContext<ConfigProviderProps>(\n      ConfigProviderContext,\n    )\n\n    const locale = configProviderProps?.locale?.pagination ?? def.pagination\n\n    const [finalCurrent, setFinalCurrent] = useMergeValue<number>(1, {\n      defaultValue: defaultCurrent,\n      value: current,\n    })\n\n    const [finalPageSize, setFinalPageSize] = useMergeValue(10, {\n      defaultValue: defaultPageSize,\n      value: pageSize,\n    })\n\n    const [jumperValue, setJumperValue] = useState(\"\")\n    const [simpleValue, setSimpleValue] = useState(\"\")\n\n    const totalPageSize = Math.ceil(total / finalPageSize)\n\n    const changeCurrent = useCallback(\n      (toCurrent: number, pageSize?: number): number => {\n        let toC = toCurrent\n        if (toCurrent < 1) {\n          toC = 1\n        } else if (toCurrent > totalPageSize) {\n          toC = totalPageSize\n        }\n        if (total === 0) {\n          toC = 0\n        }\n        if (current === undefined) {\n          setFinalCurrent(toC)\n        }\n        onChange?.(toC, pageSize ?? finalPageSize)\n        return toC\n      },\n      [current, finalPageSize, onChange, setFinalCurrent, total, totalPageSize],\n    )\n\n    const totalComponent = useMemo(() => {\n      if (isFunction(showTotal)) {\n        return (\n          <div css={totalStyle}>\n            {showTotal(total, [\n              (finalCurrent - 1) * finalPageSize,\n              (finalCurrent - 1) * finalPageSize + finalPageSize <= total\n                ? (finalCurrent - 1) * finalPageSize + finalPageSize\n                : (finalCurrent - 1) * finalPageSize + (total % finalPageSize),\n            ])}\n          </div>\n        )\n      } else {\n        return (\n          <>\n            {showTotal && (\n              <span css={totalStyle}>\n                {locale.total.replace(\"{0}\", total?.toString() ?? \"\")}\n              </span>\n            )}\n          </>\n        )\n      }\n    }, [finalCurrent, finalPageSize, locale.total, showTotal, total])\n\n    const jumperComponent = useMemo(() => {\n      return (\n        <>\n          {showJumper && (\n            <div css={jumperContainerStyle}>\n              <span css={applyJumperStyle(disabled)}>{locale.go}</span>\n              <input\n                css={applySelectorInputStyle(size, inputBorderColorScheme)}\n                value={jumperValue}\n                type=\"number\"\n                min={1}\n                max={totalPageSize}\n                disabled={disabled}\n                onChange={(e) => {\n                  setJumperValue(e.currentTarget.value)\n                }}\n                onBlur={(e) => {\n                  if (e.currentTarget.value != \"\") {\n                    changeCurrent(Number(e.currentTarget.value))\n                    setJumperValue(\"\")\n                  }\n                }}\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\" && e.currentTarget.value != \"\") {\n                    changeCurrent(Number(e.currentTarget.value))\n                    setJumperValue(\"\")\n                  }\n                }}\n              />\n            </div>\n          )}\n        </>\n      )\n    }, [\n      changeCurrent,\n      disabled,\n      inputBorderColorScheme,\n      jumperValue,\n      locale.go,\n      showJumper,\n      size,\n      totalPageSize,\n    ])\n\n    const clickNodeShow = useCallback(\n      (index: number) => {\n        let show = false\n\n        if (\n          finalCurrent + bufferSize >= index &&\n          finalCurrent - bufferSize <= index\n        ) {\n          show = true\n        }\n\n        if (index === 1 || index == totalPageSize) {\n          show = true\n        }\n\n        if (finalCurrent < startAndEndBuffer && index < startAndEndBuffer) {\n          show = true\n        }\n\n        return show\n      },\n      [bufferSize, finalCurrent, totalPageSize, startAndEndBuffer],\n    )\n\n    useEffect(() => {\n      setSimpleValue(finalCurrent.toString())\n    }, [finalCurrent])\n\n    const selectorComponent = useMemo(() => {\n      let middleComponent: ReactNode\n      if (simple) {\n        middleComponent = (\n          <div css={selectorContainerStyle}>\n            {disableSimplePageJump ? (\n              <span css={applySimpleTextStyle(css``, disabled)}>\n                {simpleValue}\n              </span>\n            ) : (\n              <input\n                css={applySelectorInputStyle(size)}\n                type=\"number\"\n                min={1}\n                max={totalPageSize}\n                value={simpleValue}\n                disabled={disabled}\n                onChange={(e) => {\n                  setSimpleValue(e.currentTarget.value)\n                }}\n                onBlur={(e) => {\n                  if (e.currentTarget.value != \"\") {\n                    changeCurrent(Number(e.currentTarget.value))\n                  }\n                }}\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\" && e.currentTarget.value != \"\") {\n                    changeCurrent(Number(e.currentTarget.value))\n                  }\n                }}\n              />\n            )}\n            <span\n              css={applySimpleTextStyle(\n                css`\n                  margin-left: 8px;\n                  margin-right: 8px;\n                `,\n                disabled,\n              )}\n            >\n              /\n            </span>\n            <span css={applySimpleTextStyle(css``, disabled)}>\n              {totalPageSize}\n            </span>\n          </div>\n        )\n      } else {\n        const clickList: ReactNode[] = []\n        for (let i = 0; i < totalPageSize; i++) {\n          const index = i + 1\n          const active = finalCurrent === index\n\n          if (clickNodeShow(index)) {\n            clickList.push(\n              <span\n                css={applyDirectorIconStyle(\n                  css`\n                    margin-right: ${i != totalPageSize - 1 ? \"8px\" : \"unset\"};\n                  `,\n                  size,\n                  disabled,\n                  activeColorScheme,\n                  active,\n                )}\n                onClick={() => {\n                  if (disabled) {\n                    return\n                  }\n                  changeCurrent(index)\n                }}\n              >\n                {i + 1}\n              </span>,\n            )\n          } else {\n            if (clickNodeShow(index - 1))\n              clickList.push(\n                <span\n                  css={applyDirectorIconStyle(\n                    css`\n                      margin-right: ${i != totalPageSize - 1 ? \"8px\" : \"unset\"};\n                    `,\n                    size,\n                    disabled,\n                  )}\n                  onClick={() => {\n                    if (disabled) {\n                      return\n                    }\n                    if (index < finalCurrent) {\n                      changeCurrent(finalCurrent - bufferSize - 1)\n                    } else if (index > finalCurrent) {\n                      changeCurrent(finalCurrent + bufferSize + 1)\n                    }\n                  }}\n                >\n                  {itemRender?.(\n                    finalPageSize,\n                    \"more\",\n                    icons?.more ?? <MoreIcon />,\n                  ) ?? <MoreIcon />}\n                </span>,\n              )\n          }\n        }\n        middleComponent = <>{clickList}</>\n      }\n\n      return (\n        <div css={selectorContainerStyle}>\n          <span\n            css={applyDirectorIconStyle(\n              css`\n                margin-right: 8px;\n              `,\n              size,\n              disabled || finalCurrent === 1 || total === 0,\n            )}\n            onClick={() => {\n              if (disabled || finalCurrent === 1 || total === 0) {\n                return\n              }\n              changeCurrent(finalCurrent - 1)\n            }}\n          >\n            {itemRender?.(\n              finalPageSize,\n              \"prev\",\n              icons?.prev ?? <PreviousIcon />,\n            ) ?? <PreviousIcon />}\n          </span>\n          {middleComponent}\n          {showMore && (\n            <span\n              css={applyDirectorIconStyle(\n                css`\n                  margin-left: 8px;\n                `,\n                size,\n                disabled,\n              )}\n              onClick={() => {\n                if (disabled) {\n                  return\n                }\n                changeCurrent(finalCurrent + bufferSize + 1)\n              }}\n            >\n              {itemRender?.(\n                finalPageSize,\n                \"more\",\n                icons?.more ?? <MoreIcon />,\n              ) ?? <MoreIcon />}\n            </span>\n          )}\n          <span\n            css={applyDirectorIconStyle(\n              css`\n                margin-left: 8px;\n              `,\n              size,\n              disabled || finalCurrent === totalPageSize || total === 0,\n            )}\n            onClick={() => {\n              if (disabled || finalCurrent === totalPageSize || total === 0) {\n                return\n              }\n              changeCurrent(finalCurrent + 1)\n            }}\n          >\n            {itemRender?.(\n              finalPageSize,\n              \"next\",\n              icons?.next ?? <NextIcon />,\n            ) ?? <NextIcon />}\n          </span>\n        </div>\n      )\n    }, [\n      bufferSize,\n      changeCurrent,\n      clickNodeShow,\n      disabled,\n      finalCurrent,\n      finalPageSize,\n      icons?.more,\n      icons?.next,\n      icons?.prev,\n      itemRender,\n      showMore,\n      simple,\n      simpleValue,\n      disableSimplePageJump,\n      size,\n      total,\n      totalPageSize,\n    ])\n\n    const finalPageSizeOptions = useMemo(() => {\n      if (!pageSizeOptions || pageSizeOptions.length === 0) {\n        return [\n          {\n            label: `10/${locale.page}`,\n            value: \"10\",\n          },\n          {\n            label: `20/${locale.page}`,\n            value: \"20\",\n          },\n          {\n            label: `30/${locale.page}`,\n            value: \"30\",\n          },\n          {\n            label: `40/${locale.page}`,\n            value: \"40\",\n          },\n          {\n            label: `50/${locale.page}`,\n            value: \"50\",\n          },\n        ]\n      } else {\n        return pageSizeOptions.map((v) => {\n          return {\n            label: `${v}/${locale.page}`,\n            value: v.toString(),\n          }\n        })\n      }\n    }, [locale.page, pageSizeOptions])\n\n    const pageSizeComponent = useMemo(() => {\n      return (\n        <>\n          {!!sizeCanChange && (\n            <Select\n              options={finalPageSizeOptions}\n              disabled={disabled}\n              ml=\"8px\"\n              defaultValue={finalPageSizeOptions[0].value.toString()}\n              colorScheme={inputBorderColorScheme}\n              onChange={(value) => {\n                if (value !== null) {\n                  let v = Number(value)\n                  let newCurrent = pageSizeChangeResetCurrent\n                    ? totalPageSize > 0\n                      ? 1\n                      : 0\n                    : Math.ceil((finalCurrent * finalPageSize) / v)\n                  onPageSizeChange?.(v, newCurrent)\n                  changeCurrent(newCurrent, v)\n                  setFinalPageSize(v)\n                }\n              }}\n            />\n          )}\n        </>\n      )\n    }, [\n      changeCurrent,\n      disabled,\n      finalCurrent,\n      finalPageSize,\n      finalPageSizeOptions,\n      inputBorderColorScheme,\n      onPageSizeChange,\n      pageSizeChangeResetCurrent,\n      setFinalPageSize,\n      sizeCanChange,\n      totalPageSize,\n    ])\n\n    if (hideOnSinglePage) {\n      if (total <= finalPageSize) {\n        return <></>\n      }\n    }\n\n    return (\n      <div\n        css={[paginationContainer, applyBoxStyle(props)]}\n        ref={ref}\n        {...deleteCssProps(otherProps)}\n      >\n        {totalComponent}\n        {selectorComponent}\n        {pageSizeComponent}\n        {jumperComponent}\n      </div>\n    )\n  },\n)\n\nPagination.displayName = \"Pagination\"\n"],"names":["paginationContainer","css","totalStyle","getColor","applyJumperStyle","disabled","jumperContainerStyle","selectorContainerStyle","applySimpleTextStyle","marginStyle","textColor","applyDirectorIconStyle","size","activeColorScheme","active","getSpecialThemeColor","bgColor","hoverStyle","s","applySelectorInputStyle","inputBorderColorScheme","getColorShadow","Pagination","forwardRef","props","ref","hideOnSinglePage","pageSizeChangeResetCurrent","showJumper","showMore","simple","disableSimplePageJump","sizeCanChange","bufferSize","current","defaultCurrent","pageSize","pageSizeOptions","defaultPageSize","total","itemRender","icons","onChange","onPageSizeChange","showTotal","otherProps","startAndEndBuffer","configProviderProps","useContext","ConfigProviderContext","locale","_a","def","finalCurrent","setFinalCurrent","useMergeValue","finalPageSize","setFinalPageSize","jumperValue","setJumperValue","useState","simpleValue","setSimpleValue","totalPageSize","changeCurrent","useCallback","toCurrent","pageSize2","toC","totalComponent","useMemo","isFunction","jsx","Fragment","jumperComponent","jsxs","e","clickNodeShow","index","show","useEffect","selectorComponent","middleComponent","clickList","i","MoreIcon","PreviousIcon","NextIcon","finalPageSizeOptions","v","pageSizeComponent","Select","value","newCurrent","applyBoxStyle","deleteCssProps"],"mappings":"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"}