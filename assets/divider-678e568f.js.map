{"version":3,"file":"divider-678e568f.js","sources":["../../../../packages/divider/src/style.ts","../../../../packages/divider/src/dividerWithText.tsx","../../../../packages/divider/src/divider.tsx"],"sourcesContent":["import {\n  DividerColorScheme,\n  DividerDirection,\n  DividerVariant,\n} from \"./interface\"\nimport { css, SerializedStyles } from \"@emotion/react\"\nimport {\n  getSpecialThemeColor,\n  globalColor,\n  illaPrefix,\n} from \"@illa-design/theme\"\n\nexport function applyDividerContainerHorizontal(\n  color: DividerColorScheme,\n  variant: DividerVariant,\n  basis?: string,\n  grow?: number,\n): SerializedStyles {\n  let flexBasis = css``\n  if (basis != undefined) {\n    flexBasis = css`\n      flex-basis: ${basis};\n    `\n  }\n\n  let flexGrow = css``\n  if (grow != undefined) {\n    flexGrow = css`\n      flex-grow: ${grow};\n    `\n  }\n\n  const c =\n    globalColor(`--${illaPrefix}-${color}-08`) === \"\"\n      ? getSpecialThemeColor(color) === \"\"\n        ? color\n        : getSpecialThemeColor(color)\n      : globalColor(`--${illaPrefix}-${color}-08`)\n  return css`\n    vertical-align: middle;\n    border-style: ${variant};\n    border-width: 0 0 ${variant == \"double\" ? \"3px\" : \"1px\"} 0;\n    border-color: ${c};\n    width: 100%;\n    ${flexBasis};\n    ${flexGrow};\n  `\n}\n\nexport function applyDividerContainerVertical(\n  color: DividerColorScheme,\n  variant: DividerVariant,\n  basis?: string,\n  grow?: number,\n): SerializedStyles {\n  let flexBasis = css``\n  if (basis != undefined) {\n    flexBasis = css`\n      flex-basis: ${basis};\n    `\n  }\n\n  let flexGrow = css``\n  if (grow != undefined) {\n    flexGrow = css`\n      flex-grow: ${grow};\n    `\n  }\n\n  const c =\n    globalColor(`--${illaPrefix}-${color}-08`) === \"\"\n      ? getSpecialThemeColor(color) === \"\"\n        ? color\n        : getSpecialThemeColor(color)\n      : globalColor(`--${illaPrefix}-${color}-08`)\n  return css`\n    display: inline-flex;\n    vertical-align: middle;\n    border-width: 0 0 0 ${variant == \"double\" ? \"3px\" : \"1px\"};\n    border-color: ${c};\n    border-style: ${variant};\n    height: 1em;\n    flex-basis: ${basis};\n    ${flexBasis};\n    ${flexGrow};\n  `\n}\n\nexport function applyDividerWithTextContainerStyle(\n  direction: DividerDirection,\n): SerializedStyles {\n  if (direction == \"horizontal\") {\n    return css`\n      align-items: center;\n      display: flex;\n      flex-direction: row;\n    `\n  } else {\n    return css`\n      align-items: center;\n      display: flex;\n      flex-direction: column;\n    `\n  }\n}\n\nexport function applyTextStyle(\n  color: DividerColorScheme,\n  fs: string,\n): SerializedStyles {\n  const c =\n    getSpecialThemeColor(color) === \"\" ? color : getSpecialThemeColor(color)\n  return css`\n    color: ${c};\n    margin-left: 16px;\n    margin-right: 16px;\n    font-size: ${fs};\n    white-space: nowrap;\n  `\n}\n","import { forwardRef } from \"react\"\nimport { DividerProps } from \"./interface\"\nimport {\n  applyDividerContainerHorizontal,\n  applyDividerContainerVertical,\n  applyDividerWithTextContainerStyle,\n  applyTextStyle,\n} from \"./style\"\nimport { applyBoxStyle, deleteCssProps } from \"@illa-design/theme\"\nimport { css, SerializedStyles } from \"@emotion/react\"\n\nexport const DividerWithText = forwardRef<HTMLDivElement, DividerProps>(\n  (props, ref) => {\n    const {\n      variant = \"solid\",\n      text,\n      fs = \"14px\",\n      direction = \"horizontal\",\n      textAlign = \"center\",\n      colorScheme = \"grayBlue\",\n      ...otherProps\n    } = props\n\n    let firstDividerStyle: SerializedStyles = css``\n    let lastDividerStyle: SerializedStyles = css``\n\n    switch (direction) {\n      case \"vertical\":\n        switch (textAlign) {\n          case \"start\":\n            firstDividerStyle = applyDividerContainerVertical(\n              colorScheme,\n              variant,\n              \"20%\",\n            )\n            lastDividerStyle = applyDividerContainerVertical(\n              colorScheme,\n              variant,\n              undefined,\n              1,\n            )\n            break\n          case \"center\":\n            firstDividerStyle = applyDividerContainerVertical(\n              colorScheme,\n              variant,\n            )\n            lastDividerStyle = applyDividerContainerVertical(\n              colorScheme,\n              variant,\n            )\n            break\n          case \"end\":\n            firstDividerStyle = applyDividerContainerVertical(\n              colorScheme,\n              variant,\n              undefined,\n              1,\n            )\n            lastDividerStyle = applyDividerContainerVertical(\n              colorScheme,\n              variant,\n              \"20%\",\n            )\n            break\n        }\n        break\n      case \"horizontal\":\n        switch (textAlign) {\n          case \"start\":\n            firstDividerStyle = applyDividerContainerHorizontal(\n              colorScheme,\n              variant,\n              \"20%\",\n            )\n            lastDividerStyle = applyDividerContainerHorizontal(\n              colorScheme,\n              variant,\n              undefined,\n              1,\n            )\n            break\n          case \"center\":\n            firstDividerStyle = applyDividerContainerHorizontal(\n              colorScheme,\n              variant,\n            )\n            lastDividerStyle = applyDividerContainerHorizontal(\n              colorScheme,\n              variant,\n            )\n            break\n          case \"end\":\n            firstDividerStyle = applyDividerContainerHorizontal(\n              colorScheme,\n              variant,\n              undefined,\n              1,\n            )\n            lastDividerStyle = applyDividerContainerHorizontal(\n              colorScheme,\n              variant,\n              \"20%\",\n            )\n            break\n        }\n        break\n    }\n\n    return (\n      <div\n        css={[\n          applyDividerWithTextContainerStyle(direction),\n          applyBoxStyle(props),\n        ]}\n        ref={ref}\n        {...deleteCssProps(otherProps)}\n      >\n        <div css={firstDividerStyle} />\n        <span css={applyTextStyle(colorScheme, fs)}>{text}</span>\n        <div css={lastDividerStyle} />\n      </div>\n    )\n  },\n)\n\nDividerWithText.displayName = \"DividerWithText\"\n","import { forwardRef } from \"react\"\nimport { SerializedStyles } from \"@emotion/react\"\nimport { DividerProps } from \"./interface\"\nimport {\n  applyDividerContainerHorizontal,\n  applyDividerContainerVertical,\n} from \"./style\"\nimport { DividerWithText } from \"./dividerWithText\"\nimport { applyBoxStyle, deleteCssProps } from \"@illa-design/theme\"\n\nexport const Divider = forwardRef<HTMLDivElement, DividerProps>(\n  (props, ref) => {\n    const {\n      direction = \"horizontal\",\n      variant = \"solid\",\n      text,\n      textAlign,\n      colorScheme = \"grayBlue\",\n      ...otherProps\n    } = props\n\n    let dividerCss: SerializedStyles\n    switch (direction) {\n      case \"vertical\":\n        dividerCss = applyDividerContainerVertical(\n          colorScheme,\n          variant,\n          \"center\",\n        )\n        break\n      case \"horizontal\":\n        dividerCss = applyDividerContainerHorizontal(\n          colorScheme,\n          variant,\n          \"center\",\n        )\n        break\n    }\n\n    if (text && text?.length > 0) {\n      return <DividerWithText ref={ref} {...props} />\n    } else {\n      return (\n        <div\n          css={[dividerCss, applyBoxStyle(props)]}\n          ref={ref}\n          {...deleteCssProps(otherProps)}\n        />\n      )\n    }\n  },\n)\n\nDivider.displayName = \"Divider\"\n"],"names":["applyDividerContainerHorizontal","color","variant","basis","grow","flexBasis","css","flexGrow","c","globalColor","illaPrefix","getSpecialThemeColor","applyDividerContainerVertical","applyDividerWithTextContainerStyle","direction","applyTextStyle","fs","DividerWithText","forwardRef","props","ref","text","textAlign","colorScheme","otherProps","firstDividerStyle","lastDividerStyle","jsxs","applyBoxStyle","deleteCssProps","jsx","Divider","dividerCss"],"mappings":"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"}