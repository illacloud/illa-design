{"version":3,"file":"hook-3354df85.js","sources":["../../../../packages/message/src/style.ts","../../../../packages/message/src/message-store.ts","../../../../packages/message/src/message.tsx","../../../../packages/message/src/message-group.tsx","../../../../packages/message/src/hook.ts"],"sourcesContent":["import { css, SerializedStyles } from \"@emotion/react\"\nimport { getColor, zIndex } from \"@illa-design/theme\"\n\nexport const messageContainerStyle: SerializedStyles = css`\n  pointer-events: visible;\n  display: inline-flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 9px 16px;\n  border-radius: 4px;\n  box-shadow: 0 4px 10px 0 ${getColor(\"blackAlpha\", \"07\")};\n  border: solid 1px ${getColor(\"gray\", \"08\")};\n  background-color: ${getColor(\"white\", \"01\")};\n  margin-bottom: 16px;\n`\n\nexport function applyMessageTextStyle(showIcon: boolean): SerializedStyles {\n  return css`\n    font-size: 14px;\n    margin-left: ${showIcon ? \"8px\" : \"0\"};\n    color: ${getColor(\"gray\", \"02\")};\n  `\n}\n\nexport const applyTopContainer: SerializedStyles = css`\n  display: inline-flex;\n  pointer-events: none;\n  z-index: ${zIndex.message};\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 16px;\n  align-items: center;\n  flex-direction: column;\n`\n\nexport const applyBottomContainer: SerializedStyles = css`\n  display: inline-flex;\n  pointer-events: none;\n  z-index: ${zIndex.message};\n  position: fixed;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  align-items: center;\n  flex-direction: column;\n`\n","import { MessageProps } from \"./interface\"\nimport { v4 } from \"uuid\"\n\nexport interface MessageGlobalProps {\n  maxCount?: number\n  duration?: number\n}\n\nexport interface MessageHandler {\n  info: (message: MessageProps) => string\n  error: (message: MessageProps) => string\n  success: (message: MessageProps) => string\n  loading: (message: MessageProps) => string\n  warning: (message: MessageProps) => string\n  normal: (message: MessageProps) => string\n  show: (message: MessageProps) => string\n  remove: (id: string) => void\n  config: (messageGlobalProps: MessageGlobalProps) => void\n  clear: () => void\n}\n\nexport interface SubListener {\n  listenerId: string\n  onStoreChange: () => void\n}\n\nexport interface MessageStoreHandler {\n  getMessage: () => MessageProps[]\n  setMessage: (messageList: MessageProps[]) => void\n  subscribe: (onStoreChange: () => void) => SubListener\n  unSubscribe: (listenerId: string) => void\n  updateConfig: (messageGlobalProps: MessageGlobalProps) => void\n  getConfig: () => MessageGlobalProps\n  add: (message: MessageProps) => void\n  remove: (messageId: string) => void\n}\n\nexport interface MessageStore {\n  maxCount: number\n  duration: number\n  listener: SubListener[]\n  messageList: MessageProps[]\n}\n\nconst store = {\n  maxCount: 5,\n  duration: 3000,\n  listener: [],\n  messageList: [],\n} as MessageStore\n\nfunction createMessageStore(): MessageStoreHandler {\n  return {\n    getMessage: () => {\n      return store.messageList\n    },\n    setMessage: (messageList: MessageProps[]) => {\n      store.messageList = messageList\n      store.listener.forEach((listener) => {\n        listener.onStoreChange()\n      })\n    },\n    subscribe: (change) => {\n      const listener = {\n        listenerId: v4(),\n        onStoreChange: change,\n      } as SubListener\n      store.listener.push(listener)\n      listener.onStoreChange()\n      return listener\n    },\n    unSubscribe: (listenerId) => {\n      store.listener.splice(\n        store.listener.findIndex(\n          (listener) => listener.listenerId === listenerId,\n        ),\n        1,\n      )\n    },\n    add: (message) => {\n      store.messageList.push(message)\n      store.listener.forEach((listener) => {\n        listener.onStoreChange()\n      })\n    },\n    updateConfig: (messageGlobalProps) => {\n      if (messageGlobalProps.duration != undefined) {\n        store.duration = messageGlobalProps.duration\n      }\n      if (messageGlobalProps.maxCount != undefined) {\n        store.maxCount = messageGlobalProps.maxCount\n      }\n    },\n    getConfig: () => {\n      return {\n        maxCount: store.maxCount,\n        duration: store.duration,\n      }\n    },\n    remove: (messageId) => {\n      const index = store.messageList.findIndex(\n        (message) => message.id === messageId,\n      )\n      if (index != -1) {\n        store.messageList.splice(index, 1)\n        store.listener.forEach((listener) => {\n          listener.onStoreChange()\n        })\n      }\n    },\n  } as MessageStoreHandler\n}\n\nexport const messageStore = createMessageStore()\n","import {\n  forwardRef,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from \"react\"\nimport { MessageProps } from \"./interface\"\nimport { applyMessageTextStyle, messageContainerStyle } from \"./style\"\nimport {\n  CloseIcon,\n  ErrorCircleIcon,\n  InfoCircleIcon,\n  LoadingIcon,\n  WarningCircleIcon,\n  SuccessCircleIcon,\n} from \"@illa-design/icon\"\nimport { applyBoxStyle, getColor } from \"@illa-design/theme\"\nimport { messageStore } from \"./message-store\"\nimport { motion } from \"framer-motion\"\n\nexport const Message = forwardRef<HTMLDivElement, MessageProps>(\n  (props, ref) => {\n    const {\n      type,\n      closable,\n      showIcon = true,\n      duration,\n      id = \"\",\n      position,\n      icon,\n      content,\n      onClose,\n    } = props\n\n    const handlerId = useRef<number | undefined>()\n\n    const delayClose = useCallback(() => {\n      let timeId: number | undefined\n      if (duration) {\n        timeId = window.setTimeout(() => {\n          messageStore.remove(id)\n          onClose?.()\n        }, duration)\n      } else {\n        timeId = window.setTimeout(() => {\n          messageStore.remove(id)\n          onClose?.()\n          handlerId.current = undefined\n        }, messageStore.getConfig()?.duration ?? 3000)\n      }\n      handlerId.current = timeId\n    }, [duration, id, onClose])\n\n    useEffect(() => {\n      delayClose()\n      return () => {\n        if (handlerId.current) {\n          clearTimeout(handlerId.current)\n          handlerId.current = undefined\n        }\n      }\n    }, [delayClose])\n\n    const normalIcon: ReactNode = useMemo(() => {\n      if (showIcon) {\n        if (icon) {\n          return icon\n        } else {\n          switch (type) {\n            case \"info\":\n              return <InfoCircleIcon fs=\"16px\" c={getColor(\"blue\", \"03\")} />\n            case \"error\":\n              return <ErrorCircleIcon fs=\"16px\" c={getColor(\"red\", \"03\")} />\n            case \"success\":\n              return <SuccessCircleIcon fs=\"16px\" c={getColor(\"green\", \"03\")} />\n            case \"warning\":\n              return <WarningCircleIcon fs=\"16px\" c={getColor(\"red\", \"03\")} />\n            case \"loading\":\n              return <LoadingIcon spin fs=\"16px\" c={getColor(\"blue\", \"03\")} />\n            case \"normal\":\n            default:\n              return <></>\n          }\n        }\n      } else {\n        return <></>\n      }\n    }, [showIcon, icon, type])\n\n    return (\n      <motion.div\n        ref={ref}\n        layout\n        exit={{\n          opacity: 0,\n          transition: {\n            opacity: { duration: 0.2, ease: \"linear\" },\n          },\n        }}\n        animate={{\n          opacity: 1,\n        }}\n        initial={{\n          opacity: 0,\n        }}\n        transition={{ duration: 0.2 }}\n        css={[messageContainerStyle, applyBoxStyle(props)]}\n        onMouseEnter={() => {\n          if (handlerId.current) {\n            clearTimeout(handlerId.current)\n            handlerId.current = undefined\n          }\n        }}\n        onMouseLeave={() => {\n          delayClose()\n        }}\n      >\n        {normalIcon}\n        <span css={applyMessageTextStyle(showIcon && type !== \"normal\")}>\n          {content}\n        </span>\n        {closable && (\n          <CloseIcon\n            fs=\"8px\"\n            ml=\"15px\"\n            c={getColor(\"gray\", \"03\")}\n            onClick={() => {\n              messageStore.remove(id)\n              onClose?.()\n            }}\n          />\n        )}\n      </motion.div>\n    )\n  },\n)\n\nMessage.displayName = \"Message\"\n","import { FC, useEffect, useMemo, useState } from \"react\"\nimport { AnimatePresence } from \"framer-motion\"\nimport { MessageProps } from \"./interface\"\nimport { applyBottomContainer, applyTopContainer } from \"./style\"\nimport { messageStore } from \"./message-store\"\nimport { Message } from \"./message\"\nimport { applyBoxStyle, BoxProps } from \"@illa-design/theme\"\n\nexport const MessageGroup: FC<BoxProps> = (props) => {\n  const [topMessageList, setTopMessageList] = useState<MessageProps[]>([])\n  const [bottomMessageList, setBottomMessageList] = useState<MessageProps[]>([])\n\n  useEffect(() => {\n    const listener = messageStore.subscribe(() => {\n      setTopMessageList(\n        messageStore.getMessage().filter((item) => {\n          return item.position === \"top\"\n        }),\n      )\n      setBottomMessageList(\n        messageStore.getMessage().filter((item) => {\n          return item.position === \"bottom\"\n        }),\n      )\n    })\n    return () => {\n      messageStore.unSubscribe(listener.listenerId)\n    }\n  }, [])\n\n  const topMessage = useMemo(() => {\n    return topMessageList.map((message) => {\n      return <Message key={message.id} {...message} />\n    })\n  }, [topMessageList])\n\n  const bottomMessage = useMemo(() => {\n    return bottomMessageList.map((message) => {\n      return <Message key={message.id} {...message} />\n    })\n  }, [bottomMessageList])\n\n  return (\n    <>\n      <div css={[applyTopContainer, applyBoxStyle(props)]}>\n        <AnimatePresence>{topMessage}</AnimatePresence>\n      </div>\n      <div css={[applyBottomContainer, applyBoxStyle(props)]}>\n        <AnimatePresence>{bottomMessage}</AnimatePresence>\n      </div>\n    </>\n  )\n}\n\nMessageGroup.displayName = \"MessageGroup\"\n","import { MessageProps } from \"./interface\"\nimport {\n  MessageGlobalProps,\n  MessageHandler,\n  messageStore,\n} from \"./message-store\"\nimport { v4 } from \"uuid\"\n\nconst showImpl = (message: MessageProps) => {\n  if (\n    messageStore.getMessage().length > (messageStore.getConfig().maxCount ?? 5)\n  ) {\n    messageStore.getMessage().shift()\n  }\n  if (!message.id) {\n    message.id = v4()\n  }\n  if (!message.position) {\n    message.position = \"top\"\n  }\n  if (!message.type) {\n    message.type = \"normal\"\n  }\n  messageStore.add(message)\n  return message.id\n}\n\nconst handler = {\n  info: (message: MessageProps) => {\n    message.type = \"info\"\n    return showImpl(message)\n  },\n  error: (message: MessageProps) => {\n    message.type = \"error\"\n    return showImpl(message)\n  },\n  success: (message: MessageProps) => {\n    message.type = \"success\"\n    return showImpl(message)\n  },\n  loading: (message: MessageProps) => {\n    message.type = \"loading\"\n    return showImpl(message)\n  },\n  warning: (message: MessageProps) => {\n    message.type = \"warning\"\n    return showImpl(message)\n  },\n  normal: (message: MessageProps) => {\n    message.type = \"normal\"\n    return showImpl(message)\n  },\n  show: showImpl,\n  remove: (id: string) => {\n    messageStore.remove(id)\n  },\n  clear: () => {\n    messageStore.setMessage([])\n  },\n  config: (messageGlobalProps: MessageGlobalProps) => {\n    messageStore.updateConfig(messageGlobalProps)\n  },\n} as MessageHandler\n\nexport function useMessage(): MessageHandler {\n  return handler\n}\n\nexport const createMessage = useMessage\n"],"names":["messageContainerStyle","css","getColor","applyMessageTextStyle","showIcon","applyTopContainer","zIndex","applyBottomContainer","store","createMessageStore","messageList","listener","change","v4","listenerId","message","messageGlobalProps","messageId","index","messageStore","Message","forwardRef","props","ref","type","closable","duration","id","position","icon","content","onClose","handlerId","useRef","delayClose","useCallback","timeId","_a","useEffect","normalIcon","useMemo","jsx","InfoCircleIcon","ErrorCircleIcon","SuccessCircleIcon","WarningCircleIcon","LoadingIcon","Fragment","jsxs","motion","applyBoxStyle","CloseIcon","MessageGroup","topMessageList","setTopMessageList","useState","bottomMessageList","setBottomMessageList","item","topMessage","bottomMessage","AnimatePresence","showImpl","handler","useMessage"],"mappings":"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"}