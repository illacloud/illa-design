{"version":3,"file":"input-abc06790.js","sources":["../../../../packages/input/src/input.tsx"],"sourcesContent":["import { forwardRef, ReactNode } from \"react\"\nimport { InputProps } from \"./interface\"\nimport {\n  applyAddAfterStyle,\n  applyAddBeforeStyle,\n  applyInputContainerStyle,\n  applyInputDisabledStyle,\n  applyInputElementStyle,\n  applyInputStyle,\n  applyLabelDomElementStyle,\n  applyMaxLengthBeforeStyle,\n  applyPrefixStyle,\n  applySuffixStyle,\n  applyWordLimitStyle,\n} from \"./style\"\nimport { useMergeValue } from \"@illa-design/system\"\nimport { ClearIcon } from \"@illa-design/icon\"\nimport { applyBoxStyle, deleteCssProps, getColor } from \"@illa-design/theme\"\n\nexport const Input = forwardRef<HTMLDivElement, InputProps>((props, ref) => {\n  const {\n    colorScheme = \"blue\",\n    allowClear,\n    disabled,\n    error,\n    readOnly,\n    onFocus,\n    showWordLimit,\n    defaultValue,\n    placeholder,\n    value,\n    size = \"medium\",\n    addAfter,\n    bdRadius,\n    addBefore,\n    prefix,\n    inputRef,\n    suffix,\n    maxLength,\n    onChange,\n    type,\n    onClear,\n    onClick,\n    onPressEnter,\n    variant = \"outline\",\n    onBlur,\n    ...otherProps\n  } = props\n\n  let borderList = bdRadius?.split(\" \") ?? [\"8px\", \"8px\", \"8px\", \"8px\"]\n  if (borderList.length == 2) {\n    borderList = [borderList[0], borderList[1], borderList[0], borderList[1]]\n  } else if (borderList.length == 3) {\n    borderList = [borderList[0], borderList[1], borderList[2], borderList[1]]\n  }\n\n  const [finalValue, setFinalValue] = useMergeValue<\n    string | number | ReactNode\n  >(\"\", {\n    defaultValue: defaultValue,\n    value: value,\n  })\n\n  const [finalError, setFinalError] = useMergeValue(false, {\n    defaultValue: false,\n    value: error,\n  })\n\n  const finalMaxLength = maxLength\n    ? typeof maxLength === \"number\"\n      ? maxLength\n      : maxLength.length\n    : undefined\n\n  const finalMaxLengthErrorOnly = maxLength\n    ? typeof maxLength === \"number\"\n      ? false\n      : maxLength.errorOnly\n    : undefined\n\n  return (\n    <div\n      css={[applyInputContainerStyle(), applyBoxStyle(otherProps)]}\n      ref={ref}\n      onClick={onClick}\n    >\n      {addBefore && (\n        <span\n          css={applyAddBeforeStyle(\n            size,\n            variant,\n            disabled ?? false,\n            borderList,\n          )}\n        >\n          {addBefore}\n        </span>\n      )}\n      <div\n        aria-disabled={disabled}\n        css={\n          disabled\n            ? applyInputDisabledStyle(\n                size,\n                variant,\n                colorScheme,\n                finalError,\n                !!addBefore,\n                !!addAfter,\n                borderList,\n              )\n            : applyInputStyle(\n                size,\n                variant,\n                colorScheme,\n                finalError,\n                !!addBefore,\n                !!addAfter,\n                borderList,\n              )\n        }\n      >\n        {prefix && (\n          <span css={applyPrefixStyle(size, disabled ?? false)}>{prefix}</span>\n        )}\n        {typeof finalValue !== \"object\" && (\n          <input\n            onFocus={onFocus}\n            ref={inputRef}\n            type={type}\n            disabled={disabled}\n            onBlur={onBlur}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                onPressEnter?.(e)\n              }\n            }}\n            maxLength={finalMaxLengthErrorOnly ? undefined : finalMaxLength}\n            readOnly={readOnly}\n            value={\n              typeof finalValue === \"string\" || typeof finalValue === \"number\"\n                ? finalValue\n                : \"\"\n            }\n            css={applyInputElementStyle(size)}\n            placeholder={placeholder}\n            onChange={(event) => {\n              onChange?.(event.target.value, event)\n              if (\n                finalMaxLength &&\n                event.target.value.length > finalMaxLength\n              ) {\n                if (finalMaxLengthErrorOnly) {\n                  if (error === undefined) {\n                    setFinalError(true)\n                  }\n                }\n              } else {\n                if (error === undefined) {\n                  setFinalError(false)\n                }\n              }\n              if (value === undefined) {\n                setFinalValue(event.target.value)\n              }\n            }}\n            {...deleteCssProps(otherProps)}\n          />\n        )}\n        {typeof finalValue === \"object\" && (\n          <div css={applyLabelDomElementStyle(size)}>{finalValue}</div>\n        )}\n        {allowClear &&\n          !disabled &&\n          (typeof finalValue === \"string\" || typeof finalValue === \"number\") &&\n          finalValue.toString().length > 0 && (\n            <ClearIcon\n              className=\"clear\"\n              onClick={(e) => {\n                e.stopPropagation()\n                onClear?.()\n                if (value === undefined) {\n                  setFinalValue(\"\")\n                }\n                onChange?.(\"\", e)\n              }}\n              v=\"hidden\"\n              cursor=\"pointer\"\n              fs=\"12px\"\n              ml=\"4px\"\n              c={getColor(\"grayBlue\", \"06\")}\n            />\n          )}\n        {!showWordLimit && suffix && (\n          <span css={applySuffixStyle(size, disabled ?? false)}>{suffix}</span>\n        )}\n        {showWordLimit && (\n          <span css={applyWordLimitStyle(size)}>\n            <span css={applyMaxLengthBeforeStyle(finalError)}>\n              {typeof finalValue === \"string\" ? finalValue.length : 0}\n            </span>\n            {`${finalMaxLength !== undefined ? \"/\" + finalMaxLength : \"\"}`}\n          </span>\n        )}\n      </div>\n      {addAfter && (\n        <span\n          css={applyAddAfterStyle(size, variant, disabled ?? false, borderList)}\n        >\n          {addAfter}\n        </span>\n      )}\n    </div>\n  )\n})\n\nInput.displayName = \"Input\"\n"],"names":["Input","forwardRef","props","ref","colorScheme","allowClear","disabled","error","readOnly","onFocus","showWordLimit","defaultValue","placeholder","value","size","addAfter","bdRadius","addBefore","prefix","inputRef","suffix","maxLength","onChange","type","onClear","onClick","onPressEnter","variant","onBlur","otherProps","borderList","finalValue","setFinalValue","useMergeValue","finalError","setFinalError","finalMaxLength","finalMaxLengthErrorOnly","jsxs","applyInputContainerStyle","applyBoxStyle","jsx","applyAddBeforeStyle","applyInputDisabledStyle","applyInputStyle","applyPrefixStyle","e","applyInputElementStyle","event","deleteCssProps","applyLabelDomElementStyle","ClearIcon","getColor","applySuffixStyle","applyWordLimitStyle","applyMaxLengthBeforeStyle","applyAddAfterStyle"],"mappings":"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"}