{"version":3,"file":"date-picker.stories-0f3ed481.js","sources":["../../../../packages/time-picker/src/input/singleInput.tsx","../../../../packages/time-picker/src/single-picker.tsx"],"sourcesContent":["import {\n  forwardRef,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  KeyboardEvent,\n  useCallback,\n} from \"react\"\nimport { ClearIcon } from \"@illa-design/icon\"\nimport { omit } from \"@illa-design/system\"\nimport { DateInputHandler, DateInputProps } from \"./interface\"\nimport {\n  applyInputWrapperStyle,\n  applyPrefixStyle,\n  applyRealInputStyle,\n  baseSuffixStyle,\n  clearIconStyle,\n  inputStyle,\n  suffixIconStyle,\n} from \"./style\"\n\nexport const DateInput = forwardRef<DateInputHandler, DateInputProps>(\n  (props, ref) => {\n    const {\n      style,\n      className,\n      prefixCls: propPrefixCls,\n      allowClear,\n      error,\n      disabled,\n      placeholder,\n      format,\n      size = \"medium\",\n      onClear,\n      editable,\n      value,\n      inputValue,\n      onPressEnter,\n      suffixIcon,\n      prefix,\n      onChange,\n      popupVisible,\n      isPlaceholder,\n      colorScheme = \"blue\",\n      ...rest\n    } = props\n\n    const readOnlyProps = editable ? {} : { readOnly: true }\n\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        inputRef.current?.focus?.()\n      },\n      blur: () => {\n        inputRef.current?.blur?.()\n      },\n    }))\n\n    const showValue = useMemo(() => {\n      if (inputValue !== undefined) {\n        return inputValue\n      } else if (value && !Array.isArray(value)) {\n        return typeof format === \"function\"\n          ? format(value)\n          : value.format(format)\n      }\n      return \"\"\n    }, [format, inputValue, value])\n\n    const onKeyDown = useCallback(\n      (e: KeyboardEvent<HTMLInputElement>) => {\n        const keyCode = e.code\n        if (keyCode === \"Enter\") {\n          onPressEnter?.()\n        }\n      },\n      [onPressEnter],\n    )\n\n    return (\n      <div\n        {...omit(rest, [\"onChange\", \"onPressEnter\"])}\n        css={applyInputWrapperStyle(\n          size,\n          colorScheme,\n          disabled,\n          error,\n          allowClear && !!showValue,\n        )}\n      >\n        {prefix && <div css={applyPrefixStyle(size)}>{prefix}</div>}\n        <div css={inputStyle}>\n          <input\n            ref={inputRef}\n            disabled={disabled}\n            placeholder={placeholder}\n            value={showValue}\n            onKeyDown={onKeyDown}\n            onChange={onChange}\n            {...readOnlyProps}\n            css={applyRealInputStyle(size)}\n          />\n        </div>\n        <div css={baseSuffixStyle}>\n          {allowClear && showValue && (\n            <span onClick={onClear} css={clearIconStyle} className=\"clear-icon\">\n              <ClearIcon />\n            </span>\n          )}\n          <span className=\"suffix-icon\" css={suffixIconStyle}>\n            {suffixIcon}\n          </span>\n        </div>\n      </div>\n    )\n  },\n)\n\nDateInput.displayName = \"DateInput\"\n","import {\n  useEffect,\n  useRef,\n  useState,\n  MouseEvent,\n  ChangeEvent,\n  forwardRef,\n  useCallback,\n} from \"react\"\nimport {\n  getDayjsValue,\n  isDayjs,\n  isDayjsChange,\n  toLocal,\n  toTimezone,\n  usePrevious,\n  isValidTimeString,\n} from \"@illa-design/system\"\nimport { PickerContext } from \"./context\"\nimport { Trigger } from \"@illa-design/trigger\"\nimport { DateInput } from \"./input/singleInput\"\nimport { TimePickerProps } from \"./\"\nimport { TimePickerPopup } from \"./popup/time-picker-body\"\nimport { TimeIcon } from \"@illa-design/icon\"\nimport { getDefaultValue, getFormat } from \"./utils\"\nimport { applyBoxStyle } from \"@illa-design/theme\"\nimport type { Dayjs } from \"dayjs\"\n\nexport const TimePicker = forwardRef<HTMLDivElement, TimePickerProps>(\n  (props, ref) => {\n    const {\n      allowClear = true,\n      disableConfirm,\n      placeholder,\n      disabled,\n      position = \"bottom-start\",\n      error,\n      triggerProps,\n      value: propsValue,\n      onChange,\n      icons,\n      size = \"medium\",\n      colorScheme = \"blue\",\n      editable = true,\n      utcOffset,\n      timezone,\n      format = \"HH:mm:ss\",\n      scrollSticky = true,\n      readonly = false,\n    } = props\n\n    const suffixIcon = (icons && icons.inputSuffix) || <TimeIcon />\n\n    const _format = getFormat(format)\n\n    const [popupVisible, setPopupVisible] = useState<boolean>(false)\n    const [value, setValue] = useState<Dayjs | undefined>(\n      getDefaultValue(\n        _format,\n        props.value,\n        props.defaultValue,\n        utcOffset,\n        timezone,\n      ) as Dayjs,\n    )\n    const [valueShow, setValueShow] = useState<Dayjs>()\n    const [inputValue, setInputValue] = useState<string>()\n\n    const mergedValue =\n      \"value\" in props\n        ? (getDayjsValue(\n            propsValue as Dayjs,\n            format,\n            utcOffset,\n            timezone,\n          ) as Dayjs)\n        : value\n    const mergedPopupVisible =\n      \"popupVisible\" in props ? props.popupVisible : popupVisible\n\n    const previousUtcOffset = usePrevious(utcOffset)\n    const previousTimezone = usePrevious(timezone)\n\n    const isDidMount = useRef<boolean>(false)\n\n    useEffect(() => {\n      if (isDidMount.current) {\n        if (\n          value &&\n          (previousUtcOffset !== utcOffset || timezone !== previousTimezone)\n        ) {\n          const localValue = toLocal(value, previousUtcOffset, previousTimezone)\n          const zoneValue = toTimezone(localValue, utcOffset, timezone)\n          setValue(zoneValue)\n        }\n      } else {\n        isDidMount.current = true\n      }\n    }, [previousTimezone, previousUtcOffset, timezone, utcOffset, value])\n\n    const refInput = useRef<HTMLInputElement>(null)\n\n    const focusInput = () => {\n      refInput.current?.focus?.()\n    }\n\n    const onHandleChange = (vs?: Dayjs) => {\n      if (isDayjs(vs) && isDayjsChange(mergedValue as Dayjs, vs)) {\n        onChange &&\n          onChange(\n            toLocal(vs, utcOffset, timezone).format(format),\n            toLocal(vs, utcOffset, timezone),\n          )\n      }\n    }\n\n    const onVisibleChange = (visible: boolean) => {\n      if (visible) {\n        setOpen(visible, () => {\n          setTimeout(() => focusInput())\n        })\n      } else {\n        setOpen(false)\n      }\n    }\n\n    const setOpen = (visible: boolean, callback?: () => void) => {\n      setPopupVisible(visible)\n      setInputValue(undefined)\n      callback && callback()\n      if (!visible) {\n        setValueShow(undefined)\n      }\n    }\n\n    const onConfirmValue = (vs?: Dayjs) => {\n      const newValue = vs\n      setValue(newValue)\n      setValueShow(undefined)\n      setInputValue(undefined)\n\n      onHandleChange(newValue)\n\n      if (!disableConfirm) {\n        setOpen(false)\n      }\n    }\n\n    const onPressEnter = () => {\n      onConfirmValue(valueShow || mergedValue)\n    }\n\n    const onClear = (e: MouseEvent<HTMLSpanElement>) => {\n      e.stopPropagation()\n      onConfirmValue(undefined)\n      onChange?.(undefined, undefined)\n      props.onClear?.()\n    }\n\n    const confirmInputValue = useCallback(\n      (newInputValue?: string) => {\n        const newInputDayjs = getDayjsValue(newInputValue, format) as Dayjs\n        if (isValidTimeString(newInputValue, format)) {\n          const localDayjs = toLocal(newInputDayjs, utcOffset, timezone)\n          props.onSelect &&\n            props.onSelect(localDayjs.format(format), localDayjs)\n          setValueShow(newInputDayjs)\n          setInputValue(undefined)\n        }\n      },\n      [format, props, timezone, utcOffset],\n    )\n\n    const onChangeInput = useCallback(\n      (e: ChangeEvent<HTMLInputElement>) => {\n        const newInputValue = e.target.value\n        if (!popupVisible) {\n          setPopupVisible(true)\n        }\n        setInputValue(newInputValue)\n        confirmInputValue(newInputValue)\n      },\n      [confirmInputValue, popupVisible],\n    )\n\n    return (\n      <PickerContext.Provider value={{ utcOffset, timezone }}>\n        <Trigger\n          trigger=\"click\"\n          position={position}\n          disabled={disabled || readonly}\n          popupVisible={mergedPopupVisible}\n          onVisibleChange={onVisibleChange}\n          colorScheme=\"white\"\n          content={\n            <TimePickerPopup\n              {...props}\n              format={_format}\n              onConfirmValue={onConfirmValue}\n              setValueShow={setValueShow}\n              valueShow={valueShow || mergedValue}\n              value={mergedValue}\n              popupVisible={mergedPopupVisible}\n              scrollSticky={scrollSticky}\n            />\n          }\n          showArrow={false}\n          {...triggerProps}\n        >\n          <div css={applyBoxStyle(props)} ref={ref}>\n            <DateInput\n              popupVisible={mergedPopupVisible}\n              format={_format}\n              disabled={disabled}\n              error={error}\n              size={size}\n              onPressEnter={onPressEnter}\n              onClear={onClear}\n              suffixIcon={suffixIcon}\n              editable={editable || !readonly}\n              allowClear={allowClear}\n              ref={refInput}\n              placeholder={placeholder as string}\n              value={(valueShow || mergedValue) as Dayjs}\n              inputValue={inputValue as string}\n              onChange={onChangeInput}\n              colorScheme={colorScheme}\n            />\n          </div>\n        </Trigger>\n      </PickerContext.Provider>\n    )\n  },\n)\n\nTimePicker.displayName = \"DatePicker\"\n"],"names":["DateInput","forwardRef","props","ref","style","className","propPrefixCls","allowClear","error","disabled","placeholder","format","size","onClear","editable","value","inputValue","onPressEnter","suffixIcon","prefix","onChange","popupVisible","isPlaceholder","colorScheme","rest","readOnlyProps","inputRef","useRef","useImperativeHandle","_b","_a","showValue","useMemo","onKeyDown","useCallback","e","jsxs","omit","applyInputWrapperStyle","jsx","applyPrefixStyle","inputStyle","applyRealInputStyle","baseSuffixStyle","clearIconStyle","ClearIcon","suffixIconStyle","TimePicker","disableConfirm","position","triggerProps","propsValue","icons","utcOffset","timezone","scrollSticky","readonly","TimeIcon","_format","getFormat","setPopupVisible","useState","setValue","getDefaultValue","valueShow","setValueShow","setInputValue","mergedValue","getDayjsValue","mergedPopupVisible","previousUtcOffset","usePrevious","previousTimezone","isDidMount","useEffect","localValue","toLocal","zoneValue","toTimezone","refInput","focusInput","onHandleChange","vs","isDayjs","isDayjsChange","onVisibleChange","visible","setOpen","callback","onConfirmValue","newValue","confirmInputValue","newInputValue","newInputDayjs","isValidTimeString","localDayjs","onChangeInput","PickerContext","Trigger","TimePickerPopup","applyBoxStyle"],"mappings":"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"}