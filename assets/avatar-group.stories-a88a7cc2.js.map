{"version":3,"file":"avatar-group.stories-a88a7cc2.js","sources":["../../../../packages/avatar/src/avatar-group.tsx"],"sourcesContent":["import { Children, forwardRef, ReactNode } from \"react\"\nimport { AvatarGroupProps } from \"./interface\"\nimport { css } from \"@emotion/react\"\nimport { Avatar } from \"./avatar\"\nimport {\n  applyBoxStyle,\n  deleteCssProps,\n  globalColor,\n  illaPrefix,\n} from \"@illa-design/theme\"\nimport { AvatarGroupContext } from \"./avatar-group-context\"\n\nconst avatarGroupCss = css`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`\n\nexport const AvatarGroup = forwardRef<HTMLDivElement, AvatarGroupProps>(\n  (props, ref) => {\n    const {\n      zIndexAscend,\n      maxCount = Number.MAX_VALUE,\n      colorScheme,\n      size,\n      ...otherProps\n    } = props\n\n    const childrenCount = Children.count(props.children)\n    let nodeList: ReactNode[]\n    if (childrenCount <= maxCount) {\n      nodeList = Children.toArray(props.children)\n    } else {\n      nodeList = Children.toArray(props.children).splice(0, maxCount)\n    }\n    if (childrenCount > maxCount) {\n      nodeList = [\n        ...nodeList,\n        <Avatar\n          colorScheme={\"gray\"}\n          text={`+${childrenCount - maxCount}`}\n          key=\"illa-more-avatar\"\n        />,\n      ]\n    }\n\n    let marginLeft: string\n    switch (props.size) {\n      default:\n      case \"small\":\n        marginLeft = \"-8px\"\n        break\n      case \"medium\":\n        marginLeft = \"-12px\"\n        break\n      case \"large\":\n        marginLeft = \"-20px\"\n        break\n    }\n    const newNodeList = Children.map(nodeList, (child, index) => {\n      const isFirstAvatar = index === 0\n\n      const style = css`\n        margin-left: ${isFirstAvatar ? \"0px\" : marginLeft};\n        border: solid 2px ${globalColor(`--${illaPrefix}-white-01`)};\n        border-radius: 50%;\n        z-index: ${zIndexAscend ? index : nodeList.length - index};\n      `\n\n      return <span css={style}>{child}</span>\n    })\n    return (\n      <AvatarGroupContext.Provider\n        value={{\n          zIndexAscend,\n          maxCount,\n          colorScheme,\n          size,\n        }}\n      >\n        <div\n          css={css`\n            display: inline-block;\n            ${avatarGroupCss};\n            ${applyBoxStyle(props)};\n          `}\n          ref={ref}\n          {...deleteCssProps(otherProps)}\n        >\n          {newNodeList}\n        </div>\n      </AvatarGroupContext.Provider>\n    )\n  },\n)\n\nAvatarGroup.displayName = \"AvatarGroup\"\n"],"names":["avatarGroupCss","css","AvatarGroup","forwardRef","props","ref","zIndexAscend","maxCount","colorScheme","size","otherProps","childrenCount","Children","nodeList","jsx","Avatar","marginLeft","newNodeList","child","index","style","globalColor","illaPrefix","AvatarGroupContext","applyBoxStyle","deleteCssProps"],"mappings":"ilBAYA,MAAAA,EAAAC;AAAA;AAAA;AAAA;AAAA,EAMOC,EAAAC,EAAA,WAAoB,CAAAC,EAAAC,IAAA,CAEvB,KAAA,CAAM,aAAAC,EACJ,SAAAC,EAAA,OAAA,UACkB,YAAAC,EAClB,KAAAC,EACA,GAAAC,CACG,EAAAN,EAGLO,EAAAC,EAAA,SAAA,MAAAR,EAAA,QAAA,EACA,IAAAS,EACAF,GAAAJ,EACEM,EAAAD,EAAAA,SAAA,QAAAR,EAAA,QAAA,EAEAS,EAAAD,EAAAA,SAAA,QAAAR,EAAA,QAAA,EAAA,OAAA,EAAAG,CAAA,EAEFI,EAAAJ,IACEM,EAAA,CAAW,GAAAA,EACNC,EACHC,EAAC,CAAA,YAAA,OACc,KAAA,IAAAJ,EAAAJ,CAAA,EACqB,EAAA,kBAC9B,CACN,GAIJ,IAAAS,EACA,OAAAZ,EAAA,KAAA,CAAoB,QAClB,IAAA,QAEEY,EAAA,OACA,MAAA,IAAA,SAEAA,EAAA,QACA,MAAA,IAAA,QAEAA,EAAA,QACA,KAAA,CAEJ,MAAAC,EAAAL,EAAAA,SAAA,IAAAC,EAAA,CAAAK,EAAAC,IAAA,CAGE,MAAAC,EAAAnB;AAAA,uBAFAkB,IAAA,EAEc,MAAAH,CAAA;AAAA,4BACqCK,EAAA,KAAAC,CAAA,WAAA,CAAA;AAAA;AAAA,mBACUhB,EAAAa,EAAAN,EAAA,OAAAM,CAAA;AAAA,QAK7D,OAAAL,EAAA,OAAA,CAAA,IAAAM,EAAA,SAAAF,CAAA,CAAA,CAAgC,CAAA,EAElC,OAAAJ,EACES,EAAA,SAAoB,CAAnB,MAAA,CACQ,aAAAjB,EACL,SAAAC,EACA,YAAAC,EACA,KAAAC,CACA,EACF,SAAAK,EAEA,MAAC,CAAA,IAAAb;AAAA;AAAA,cACMD,CAAA;AAAA,cAEawB,EAAApB,CAAA,CAAA;AAAA,YACM,IAAAC,EAExB,GAAAoB,EAAAf,CAAA,EAC6B,SAAAO,CAE5B,CAAA,CACH,CAAA,CACF,CAGN,EAEAf,EAAA,YAAA;;;;;;;;"}