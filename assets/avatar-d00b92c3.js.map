{"version":3,"file":"avatar-d00b92c3.js","sources":["../../../../packages/avatar/src/style.ts","../../../../packages/avatar/src/icon-avatar.tsx","../../../../packages/avatar/src/text-avatar.tsx","../../../../packages/avatar/src/img-avatar.tsx","../../../../packages/avatar/src/avatar-group-context.tsx","../../../../packages/avatar/src/avatar.tsx"],"sourcesContent":["import {\n  getSpecialThemeColor,\n  globalColor,\n  illaPrefix,\n} from \"@illa-design/theme\"\nimport {\n  AvatarColorScheme,\n  AvatarProps,\n  AvatarShape,\n  AvatarSize,\n} from \"./interface\"\nimport { css, SerializedStyles } from \"@emotion/react\"\n\nexport const colors: AvatarColorScheme[] = [\n  \"white\",\n  \"blackAlpha\",\n  \"gray\",\n  \"grayBlue\",\n  \"red\",\n  \"orange\",\n  \"yellow\",\n  \"green\",\n  \"blue\",\n  \"cyan\",\n  \"purple\",\n  \"techPink\",\n  \"techPurple\",\n]\n\nexport function applyBgColor(colorScheme: AvatarColorScheme): SerializedStyles {\n  let bgColor: SerializedStyles\n  if (colors.includes(colorScheme)) {\n    if (colorScheme == \"gray\" || colorScheme == \"grayBlue\") {\n      bgColor = css`\n        background-color: ${globalColor(`--${illaPrefix}-${colorScheme}-05`)};\n      `\n    } else {\n      bgColor = css`\n        background-color: ${getSpecialThemeColor(colorScheme)};\n      `\n    }\n  } else {\n    bgColor = css`\n      background-color: ${colorScheme};\n    `\n  }\n  return bgColor\n}\n\nexport function applyAvatarShapeSquare(size: AvatarSize): SerializedStyles {\n  const [width, height, textSize, lineHeight] = applyAvatarSize(size)\n  return css`\n    width: ${width};\n    height: ${height};\n    font-size: ${textSize};\n    line-height: ${lineHeight};\n    border-radius: 8px;\n  `\n}\n\nexport function applyAvatarShapeCircle(size: AvatarSize): SerializedStyles {\n  const [width, height, textSize, lineHeight] = applyAvatarSize(size)\n  return css`\n    width: ${width};\n    height: ${height};\n    font-size: ${textSize};\n    line-height: ${lineHeight};\n    border-radius: 50%;\n  `\n}\n\nexport function applyAvatarContainer(colorScheme: AvatarColorScheme) {\n  return css`\n    ${applyBgColor(colorScheme)};\n    display: inline-flex;\n    overflow: hidden;\n    word-wrap: break-word;\n    white-space: nowrap;\n    color: ${globalColor(`--${illaPrefix}-white-01`)};\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    padding: 4px;\n  `\n}\n\nexport function applyAvatarSize(size: AvatarSize): string[] {\n  let width: string\n  let height: string\n  let textSize: string\n  let lineHeight: string\n  switch (size) {\n    case \"large\": {\n      width = \"64px\"\n      height = \"64px\"\n      textSize = \"24px\"\n      lineHeight = \"32px\"\n      break\n    }\n    case \"medium\": {\n      width = \"40px\"\n      height = \"40px\"\n      textSize = \"14px\"\n      lineHeight = \"22px\"\n      break\n    }\n    case \"small\": {\n      width = \"32px\"\n      height = \"32px\"\n      textSize = \"14px\"\n      lineHeight = \"22px\"\n      break\n    }\n  }\n  return [width, height, textSize, lineHeight]\n}\n\nexport function applyMergeCss(props: AvatarProps): SerializedStyles {\n  const currentColorScheme = props.colorScheme ?? \"blue\"\n  const currentSize = props.size ?? \"small\"\n  const currentShape = props.shape ?? \"circle\"\n\n  const containerCss = applyAvatarContainer(currentColorScheme)\n  let shapeCss: SerializedStyles\n  switch (currentShape) {\n    case \"circle\": {\n      shapeCss = applyAvatarShapeCircle(currentSize)\n      break\n    }\n    case \"square\": {\n      shapeCss = applyAvatarShapeSquare(currentSize)\n      break\n    }\n  }\n\n  return css`\n    ${containerCss};\n    ${shapeCss};\n  `\n}\n\nexport function applyShape(shape: AvatarShape): string {\n  switch (shape) {\n    case \"circle\": {\n      return \"50%\"\n    }\n    case \"square\": {\n      return \"4px\"\n    }\n  }\n}\n\n// icon avatar\nexport function applyIconSize(size: AvatarSize) {\n  let width: number\n  let height: number\n  switch (size) {\n    case \"large\": {\n      width = 28\n      height = 28\n      break\n    }\n    case \"medium\": {\n      width = 18\n      height = 18\n      break\n    }\n    case \"small\": {\n      width = 14\n      height = 14\n      break\n    }\n  }\n  return css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    width: ${width}px;\n    font-size: ${width}px;\n    height: ${height}px;\n  `\n}\n","import { FC } from \"react\"\nimport { AvatarProps } from \"./interface\"\nimport { applyIconSize, applyMergeCss } from \"./style\"\nimport { PeopleIcon } from \"@illa-design/icon\"\n\nexport const IconAvatar: FC<AvatarProps> = (props) => {\n  const currentColorScheme = props.colorScheme ?? \"blue\"\n  const currentSize = props.size ?? \"small\"\n  const currentShape = props.shape ?? \"circle\"\n\n  let iconSize: string\n  switch (currentSize) {\n    default:\n    case \"large\": {\n      iconSize = \"28px\"\n      break\n    }\n    case \"medium\": {\n      iconSize = \"18px\"\n      break\n    }\n    case \"small\": {\n      iconSize = \"14px\"\n      break\n    }\n  }\n\n  const currentIcon = props.icon ?? <PeopleIcon size={iconSize} />\n  const finalProps = {\n    ...props,\n    colorScheme: currentColorScheme,\n    size: currentSize,\n    shape: currentShape,\n    icon: currentIcon,\n  } as AvatarProps\n  return (\n    <div css={applyMergeCss(finalProps)}>\n      <div css={applyIconSize(finalProps.size!!)}>{finalProps.icon}</div>\n    </div>\n  )\n}\n","import { FC, MutableRefObject, useEffect, useRef } from \"react\"\nimport { AvatarProps } from \"./interface\"\nimport { applyMergeCss } from \"./style\"\n\nfunction adjustFontScale(\n  textRef: MutableRefObject<HTMLSpanElement | null>,\n  avatarRef: MutableRefObject<HTMLDivElement | null>,\n) {\n  if (textRef.current != null && avatarRef.current != null) {\n    const textWidth = textRef.current!!.clientWidth\n    const size = avatarRef.current!!.offsetWidth\n    const scale = size / (textWidth + 8)\n    if (size && scale < 1) {\n      textRef.current!!.style.transform = `scale(${scale})`\n    } else {\n      textRef.current!!.style.transform = `scale(1)`\n    }\n  }\n}\n\nexport const TextAvatar: FC<AvatarProps> = (props) => {\n  const currentColorScheme = props.colorScheme ?? \"blue\"\n  const currentSize = props.size ?? \"small\"\n  const currentShape = props.shape ?? \"circle\"\n  const finalProps = {\n    ...props,\n    colorScheme: currentColorScheme,\n    size: currentSize,\n    shape: currentShape,\n  } as AvatarProps\n\n  const textRef = useRef<HTMLSpanElement | null>(null)\n  const avatarRef = useRef<HTMLDivElement | null>(null)\n\n  useEffect(() => {\n    adjustFontScale(textRef, avatarRef)\n  }, [finalProps.text, finalProps.size])\n\n  return (\n    <div ref={avatarRef} css={applyMergeCss(finalProps)}>\n      <span ref={textRef}>{props.text}</span>\n    </div>\n  )\n}\n","import { FC } from \"react\"\nimport { AvatarProps } from \"./interface\"\nimport { applyAvatarSize, applyShape } from \"./style\"\nimport { Image } from \"@illa-design/image\"\n\nexport const ImgAvatar: FC<AvatarProps> = (props) => {\n  const { size = \"small\", shape = \"circle\" } = props\n\n  const [width, height] = applyAvatarSize(size)\n  return (\n    <Image\n      src={props.src}\n      width={width}\n      height={height}\n      radius={applyShape(shape)}\n    />\n  )\n}\n","import { createContext } from \"react\"\nimport { AvatarGroupContextProps } from \"./interface\"\n\nexport const AvatarGroupContext = createContext<\n  AvatarGroupContextProps | undefined\n>(undefined)\n\nAvatarGroupContext.displayName = \"AvatarGroupContext\"\n","import { forwardRef, ReactNode } from \"react\"\nimport { AvatarProps } from \"./interface\"\nimport { IconAvatar } from \"./icon-avatar\"\nimport { TextAvatar } from \"./text-avatar\"\nimport { ImgAvatar } from \"./img-avatar\"\nimport { css } from \"@emotion/react\"\nimport { AvatarGroupContext } from \"./avatar-group-context\"\nimport { applyBoxStyle, deleteCssProps } from \"@illa-design/theme\"\n\nconst applyOuterCss = css`\n  vertical-align: middle;\n  display: inline-flex;\n`\n\nexport const Avatar = forwardRef<HTMLDivElement, AvatarProps>((props, ref) => {\n  return (\n    <AvatarGroupContext.Consumer>\n      {(value) => {\n        const {\n          colorScheme = value?.colorScheme ?? \"gray\",\n          size = value?.size ?? \"small\",\n          shape = \"circle\",\n          text = undefined,\n          src = undefined,\n          icon = undefined,\n          ...otherProps\n        } = props\n\n        let finalNode: ReactNode\n        if (props.src != undefined) {\n          finalNode = (\n            <ImgAvatar\n              colorScheme={colorScheme}\n              size={size}\n              shape={shape}\n              text={text}\n              src={src}\n              icon={icon}\n            />\n          )\n        } else if (props.text != undefined) {\n          finalNode = (\n            <TextAvatar\n              colorScheme={colorScheme}\n              size={size}\n              shape={shape}\n              text={text}\n              src={src}\n              icon={icon}\n            />\n          )\n        } else {\n          finalNode = (\n            <IconAvatar\n              colorScheme={colorScheme}\n              size={size}\n              shape={shape}\n              text={text}\n              src={src}\n              icon={icon}\n            />\n          )\n        }\n        return (\n          <div\n            css={[applyOuterCss, applyBoxStyle(props)]}\n            ref={ref}\n            {...deleteCssProps(otherProps)}\n          >\n            {finalNode}\n          </div>\n        )\n      }}\n    </AvatarGroupContext.Consumer>\n  )\n})\n\nAvatar.displayName = \"Avatar\"\n"],"names":["colors","applyBgColor","colorScheme","bgColor","css","globalColor","illaPrefix","getSpecialThemeColor","applyAvatarShapeSquare","size","width","height","textSize","lineHeight","applyAvatarSize","applyAvatarShapeCircle","applyAvatarContainer","applyMergeCss","props","currentColorScheme","currentSize","currentShape","containerCss","shapeCss","applyShape","shape","applyIconSize","IconAvatar","iconSize","currentIcon","jsx","PeopleIcon","finalProps","adjustFontScale","textRef","avatarRef","textWidth","scale","TextAvatar","useRef","useEffect","ImgAvatar","Image","AvatarGroupContext","createContext","applyOuterCss","Avatar","forwardRef","ref","value","text","src","icon","otherProps","finalNode","applyBoxStyle","deleteCssProps"],"mappings":"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"}