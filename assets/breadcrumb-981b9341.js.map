{"version":3,"file":"breadcrumb-981b9341.js","sources":["../../../../packages/breadcrumb/src/style.ts","../../../../packages/breadcrumb/src/breadcrumb-context.ts","../../../../packages/breadcrumb/src/breadcrumbItem.tsx","../../../../packages/breadcrumb/src/breadcrumb.tsx"],"sourcesContent":["import { css, SerializedStyles } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/theme\"\n\nexport const breadcrumbContainerStyle = css`\n  display: inline-flex;\n  flex-direction: row;\n  align-items: center;\n`\n\nexport const dividerStyle = css`\n  margin: 0 6px;\n`\n\nexport const dotStyle = css`\n  font-size: 14px;\n  color: ${getColor(\"gray\", \"04\")};\n`\n\nexport function applyItemStyle(showHover?: boolean): SerializedStyles {\n  const hrefStyle = showHover\n    ? css`\n        &:hover {\n          background: ${getColor(\"gray\", \"09\")};\n          border-radius: 4px;\n          cursor: pointer;\n        }\n      `\n    : css``\n\n  return css`\n    font-size: 14px;\n    display: inline-flex;\n    align-items: center;\n    color: ${getColor(\"gray\", \"04\")};\n    padding: 1px 4px;\n    transition: 200ms ease-in-out;\n    text-decoration: none;\n    ${hrefStyle};\n  `\n}\n\nexport const itemFinalStyle = css`\n  font-size: 14px;\n  text-decoration: none;\n  color: ${getColor(\"gray\", \"02\")};\n  font-weight: 500;\n`\n","import { createContext } from \"react\"\n\nexport interface BreadcrumbContextProps {\n  onClickPath?: (path: string, last: boolean) => void\n  blockRouterChange?: boolean\n}\n\nexport const BreadcrumbContext = createContext<BreadcrumbContextProps>({})\n","import { forwardRef, useContext } from \"react\"\nimport { BreadcrumbItemProps } from \"./interface\"\nimport { applyItemStyle, itemFinalStyle } from \"./style\"\nimport { applyBoxStyle, deleteCssProps } from \"@illa-design/theme\"\nimport { Dropdown } from \"@illa-design/dropdown\"\nimport { DownIcon } from \"@illa-design/icon\"\nimport { BreadcrumbContext } from \"./breadcrumb-context\"\n\nexport const BreadcrumbItem = forwardRef<HTMLDivElement, BreadcrumbItemProps>(\n  (props, ref) => {\n    const {\n      dropList,\n      dropdownProps,\n      children,\n      last,\n      href,\n      onClick,\n      blockRouterChange,\n      ...restProps\n    } = props\n\n    const breadcrumbContext = useContext(BreadcrumbContext)\n    const finalBlockRouterChange =\n      blockRouterChange ?? breadcrumbContext?.blockRouterChange ?? false\n\n    return (\n      <Dropdown position=\"bottom-start\" dropList={dropList} {...dropdownProps}>\n        <a\n          css={[\n            last\n              ? itemFinalStyle\n              : applyItemStyle(href !== undefined || onClick !== undefined),\n            applyBoxStyle(props),\n          ]}\n          href={finalBlockRouterChange ? undefined : href}\n          onClick={(event) => {\n            onClick?.(event)\n            breadcrumbContext?.onClickPath?.(href ?? \"\", last ?? false)\n          }}\n          {...deleteCssProps(restProps)}\n        >\n          {children}\n          {dropList && <DownIcon ml=\"2px\" />}\n        </a>\n      </Dropdown>\n    )\n  },\n)\n\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n","import {\n  Children,\n  cloneElement,\n  forwardRef,\n  Fragment,\n  ReactElement,\n  useMemo,\n} from \"react\"\nimport { BreadcrumbProps } from \"./interface\"\nimport { breadcrumbContainerStyle, dividerStyle, dotStyle } from \"./style\"\nimport { SlashIcon } from \"@illa-design/icon\"\nimport { applyBoxStyle, deleteCssProps, getColor } from \"@illa-design/theme\"\nimport { BreadcrumbItem } from \"./breadcrumbItem\"\nimport { DropList, DropListItem } from \"@illa-design/dropdown\"\nimport { BreadcrumbContext } from \"./breadcrumb-context\"\n\nexport const Breadcrumb = forwardRef<HTMLDivElement, BreadcrumbProps>(\n  (props, ref) => {\n    const {\n      separator,\n      routes,\n      maxCount,\n      blockRouterChange,\n      children,\n      onClickPath,\n      ...otherProps\n    } = props\n\n    const separatorNode = useMemo(() => {\n      return typeof separator === \"string\" ? (\n        <span css={dividerStyle}>{separator}</span>\n      ) : (\n        separator ?? (\n          <SlashIcon ml=\"12px\" mr=\"12px\" fs=\"8px\" c={getColor(\"gray\", \"06\")} />\n        )\n      )\n    }, [separator])\n\n    const childrenNode = useMemo(() => {\n      if (routes) {\n        return routes.map((child, index) => {\n          return (\n            <Fragment key={index}>\n              <BreadcrumbItem\n                key={child.path}\n                last={index === routes.length - 1}\n                dropList={\n                  child.children ? (\n                    <DropList>\n                      {child.children?.map((c) => {\n                        return (\n                          <DropListItem\n                            value={c.path ?? \"\"}\n                            key={c.path ?? \"\"}\n                            title={c.breadcrumbName}\n                            onClick={() => {\n                              if (c.path && !blockRouterChange) {\n                                window.location.href = c.path\n                              }\n                              onClickPath?.(\n                                c.path ?? \"\",\n                                index === routes.length - 1,\n                              )\n                            }}\n                          />\n                        )\n                      })}\n                    </DropList>\n                  ) : undefined\n                }\n              >\n                {child.breadcrumbName}\n              </BreadcrumbItem>\n              {index !== routes.length - 1 && separatorNode}\n            </Fragment>\n          )\n        })\n      } else {\n        return Children.toArray(children)\n          .filter((child) => child !== undefined && child !== null)\n          .map((child, index, array) => {\n            return (\n              <Fragment key={index}>\n                {index !== array.length - 1\n                  ? child\n                  : cloneElement(child as ReactElement, { last: true })}\n                {index !== array.length - 1 && separatorNode}\n              </Fragment>\n            )\n          })\n      }\n    }, [blockRouterChange, children, onClickPath, routes, separatorNode])\n\n    const maxChildren = useMemo(() => {\n      if (maxCount != undefined && childrenNode) {\n        if (childrenNode.length > maxCount) {\n          if (maxCount == 0) {\n            return <span css={dotStyle}>...</span>\n          } else if (maxCount === 1) {\n            return childrenNode[childrenNode.length - 1]\n          } else if (maxCount === 2) {\n            return (\n              <>\n                {childrenNode[0]}\n                <span css={dotStyle}>...</span>\n                {separatorNode}\n                {childrenNode[childrenNode.length - 1]}\n              </>\n            )\n          } else {\n            return (\n              <>\n                {childrenNode[0]}\n                <span css={dotStyle}>...</span>\n                {separatorNode}\n                {childrenNode[childrenNode.length - 2]}\n                {childrenNode[childrenNode.length - 1]}\n              </>\n            )\n          }\n        }\n      }\n      return childrenNode\n    }, [childrenNode, maxCount, separatorNode])\n\n    return (\n      <div\n        css={[breadcrumbContainerStyle, applyBoxStyle(props)]}\n        {...deleteCssProps(otherProps)}\n      >\n        <BreadcrumbContext.Provider\n          value={{\n            onClickPath,\n            blockRouterChange,\n          }}\n        >\n          {maxChildren}\n        </BreadcrumbContext.Provider>\n      </div>\n    )\n  },\n)\n\nBreadcrumb.displayName = \"Breadcrumb\"\n"],"names":["breadcrumbContainerStyle","css","dividerStyle","dotStyle","getColor","applyItemStyle","showHover","hrefStyle","itemFinalStyle","BreadcrumbContext","createContext","BreadcrumbItem","forwardRef","props","ref","dropList","dropdownProps","children","last","href","onClick","blockRouterChange","restProps","breadcrumbContext","useContext","finalBlockRouterChange","jsx","Dropdown","jsxs","applyBoxStyle","event","_a","deleteCssProps","DownIcon","Breadcrumb","separator","routes","maxCount","onClickPath","otherProps","separatorNode","useMemo","SlashIcon","childrenNode","child","index","Fragment2","DropList","DropListItem","Children","array","cloneElement","maxChildren","Fragment"],"mappings":"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"}