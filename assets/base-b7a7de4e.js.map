{"version":3,"file":"base-b7a7de4e.js","sources":["../../../../packages/typography/src/ellipsis-config.ts","../../../../packages/typography/src/base-style.ts","../../../../packages/typography/src/measure-element.ts","../../../../packages/typography/src/copyable-config.tsx","../../../../packages/typography/src/base.tsx"],"sourcesContent":["import { ReactNode } from \"react\"\n\nexport class Ellipsis {\n  expandable: boolean = true\n  rows: number = 2\n  suffix: string | null = null\n  expandLabel: string | ReactNode\n  tooltip: boolean = true\n  onExpand?: () => void\n}\n\nexport class EllipsisBuilder {\n  private config: Ellipsis = new Ellipsis()\n\n  public expandable(expandable: boolean): EllipsisBuilder {\n    this.config.expandable = expandable\n    return this\n  }\n\n  public rows(rows: number): EllipsisBuilder {\n    this.config.rows = rows\n    return this\n  }\n\n  public suffix(suffix: string): EllipsisBuilder {\n    this.config.suffix = suffix\n    return this\n  }\n\n  public expandLabel(expandLabel: string | ReactNode): EllipsisBuilder {\n    this.config.expandLabel = expandLabel\n    return this\n  }\n\n  public tooltip(tooltip: boolean): EllipsisBuilder {\n    this.config.tooltip = tooltip\n    return this\n  }\n\n  public onExpand(fun: () => void): EllipsisBuilder {\n    this.config.onExpand = fun\n    return this\n  }\n\n  public create(): Ellipsis {\n    return this.config\n  }\n}\n","import { TypographyColorScheme } from \"./interface\"\nimport { css, SerializedStyles } from \"@emotion/react\"\nimport {\n  globalColor,\n  getSpecialThemeColor,\n  illaPrefix,\n  getColor,\n} from \"@illa-design/theme\"\n\nconst colorSchemes = [\n  \"white\",\n  \"blackAlpha\",\n  \"gray\",\n  \"grayBlue\",\n  \"red\",\n  \"orange\",\n  \"yellow\",\n  \"green\",\n  \"blue\",\n  \"cyan\",\n  \"purple\",\n]\n\nexport const applyOperationSpan = css`\n  display: inline-block;\n`\n\nexport const applyCopyContainer = css`\n  display: inline-flex;\n  flex-direction: row;\n  align-items: center;\n`\n\nexport function applyFontColor(\n  colorScheme: TypographyColorScheme,\n): SerializedStyles {\n  const color = colorSchemes.includes(colorScheme)\n    ? getSpecialThemeColor(colorScheme)\n    : colorScheme\n  return css`\n    color: ${color};\n  `\n}\n\nexport function applyFontContentStyle(\n  bold?: boolean,\n  mark?: boolean | TypographyColorScheme,\n  underline?: boolean,\n  deleted?: boolean,\n  disabled?: boolean,\n): SerializedStyles {\n  let finalCss = css``\n\n  if (bold) {\n    finalCss = css`\n      ${finalCss};\n      font-weight: bold;\n    `\n  }\n\n  if (mark && typeof mark != \"string\") {\n    finalCss = css`\n      ${finalCss};\n      background-color: ${globalColor(`--${illaPrefix}-yellow-07`)};\n    `\n  }\n  if (typeof mark == \"string\") {\n    const bgColor = colorSchemes.includes(mark)\n      ? globalColor(`--${illaPrefix}-${mark}-07`)\n      : mark\n    finalCss = css`\n      ${finalCss};\n      background-color: ${bgColor};\n    `\n  }\n\n  finalCss = css`\n    ${finalCss};\n    text-decoration: ${underline && \"underline\"} ${deleted && \"line-through\"};\n  `\n\n  if (disabled) {\n    finalCss = css`\n      ${finalCss};\n      cursor: not-allowed;\n      color: ${getColor(\"grayBlue\", \"05\")};\n      user-select: none;\n    `\n  }\n\n  return finalCss\n}\n\nexport function applyExpandLabelCss(): SerializedStyles {\n  return css`\n    cursor: pointer;\n    margin: 0 4px;\n    text-decoration: none;\n    color: ${getColor(\"blue\", \"03\")};\n  `\n}\n\nexport function applyCopyableContainerSize(): SerializedStyles {\n  return css`\n    cursor: pointer;\n    margin-left: 4px;\n    color: ${getColor(\"grayBlue\", \"02\")};\n  `\n}\n\nexport const applyCopyableIconSize = css`\n  cursor: pointer;\n  font-size: 0.75em;\n  margin-left: 4px;\n  color: ${getColor(\"grayBlue\", \"02\")};\n  display: inline-flex;\n  align-items: center;\n`\n","import { Children, ReactNode } from \"react\"\nimport { mergedToString } from \"@illa-design/system\"\n\nfunction inRange(\n  computeElement: HTMLElement,\n  maxHeight: number,\n  lastLineMaxWidth: number,\n  rows: number,\n) {\n  const lines = computeElement.getClientRects().length\n  if (lines > rows) {\n    return false\n  }\n  if (lines < rows) {\n    return true\n  }\n  const lastLineWidth = computeElement.getClientRects()[rows - 1]?.width ?? 0\n  return lastLineWidth <= lastLineMaxWidth\n}\n\nfunction measureText(\n  computeElement: HTMLElement,\n  textNode: Text,\n  fullText: string,\n  maxHeight: number,\n  lastLineMaxWidth: number,\n  rows: number,\n  start: number = 0,\n  end: number = fullText.length,\n) {\n  if (\n    start >= end - 1 &&\n    inRange(computeElement, maxHeight, lastLineMaxWidth, rows)\n  ) {\n    return\n  }\n  const mid = Math.floor((start + end) / 2)\n  textNode.textContent = fullText.slice(0, mid).trim()\n  if (inRange(computeElement, maxHeight, lastLineMaxWidth, rows)) {\n    measureText(\n      computeElement,\n      textNode,\n      fullText,\n      maxHeight,\n      lastLineMaxWidth,\n      rows,\n      mid,\n      end,\n    )\n  } else {\n    measureText(\n      computeElement,\n      textNode,\n      fullText,\n      maxHeight,\n      lastLineMaxWidth,\n      rows,\n      start,\n      mid,\n    )\n  }\n}\n\nfunction getContentHeight(contentRef: HTMLSpanElement): number {\n  let height = 0\n  for (let c of contentRef.getClientRects()) {\n    height += c.height\n  }\n  return height\n}\n\nfunction getContentWidth(contentRef: HTMLSpanElement): number {\n  let width = 0\n  const list = contentRef.getClientRects()\n  for (let i = 0; i < list.length; i++) {\n    width += list[i].width\n  }\n  return width\n}\n\nfunction getMaxLineWidth(contentRef: HTMLSpanElement): number {\n  return contentRef.getBoundingClientRect().width\n}\n\nexport interface MeasureResult {\n  screenString: string\n  isClip: boolean\n}\n\nexport function measureElement(\n  contentRef: HTMLElement,\n  operationRef: HTMLSpanElement,\n  rows: number,\n  children: ReactNode,\n): MeasureResult {\n  const lineHeight = contentRef.getClientRects()[0]?.height ?? 0\n  const operationWidth = getContentWidth(operationRef)\n\n  let computeElement = document.createElement(contentRef.tagName)\n  document.body.appendChild(computeElement)\n\n  // create text node\n  const fullText = mergedToString(Children.toArray(children))\n  const textNode = document.createTextNode(fullText)\n\n  // deal css\n  const originStyle = window.getComputedStyle(contentRef)\n  const styleNames: string[] = Array.prototype.slice.apply(originStyle)\n  const styleString = styleNames\n    .map((name) => `${name}: ${originStyle.getPropertyValue(name)};`)\n    .join(\"\")\n\n  computeElement.setAttribute(\"style\", styleString)\n  computeElement.insertBefore(textNode, computeElement.firstChild)\n\n  const maxHeight = lineHeight * rows\n\n  if (getContentHeight(computeElement) <= maxHeight) {\n    computeElement.remove()\n    return {\n      screenString: fullText,\n      isClip: false,\n    } as MeasureResult\n  }\n\n  const lastLineMaxWidth = getMaxLineWidth(computeElement) - operationWidth\n  measureText(\n    computeElement,\n    textNode,\n    fullText,\n    maxHeight,\n    lastLineMaxWidth,\n    rows,\n  )\n  const finalString = computeElement.textContent ?? \"\"\n  computeElement.remove()\n  return {\n    fullText: fullText,\n    screenString: finalString,\n    isClip: true,\n  } as MeasureResult\n}\n","import { ReactNode } from \"react\"\nimport { CopyIcon, SuccessCircleIcon } from \"@illa-design/icon\"\nimport { globalColor, illaPrefix } from \"@illa-design/theme\"\n\nexport class Copyable {\n  copyIcon: ReactNode = (\n    <CopyIcon color={globalColor(`--${illaPrefix}-grayBlue-01`)} />\n  )\n  copiedIcon: ReactNode = (\n    <SuccessCircleIcon color={globalColor(`--${illaPrefix}-green-03`)} />\n  )\n  copiedToolTip: boolean | string | ReactNode\n  copyToolTip: boolean | string | ReactNode\n  onCopy?: () => void\n}\n\nexport class CopyableBuilder {\n  private config: Copyable = new Copyable()\n\n  public copyIcon(copyIcon: ReactNode): CopyableBuilder {\n    this.config.copyIcon = copyIcon\n    return this\n  }\n\n  public copiedIcon(copiedIcon: ReactNode): CopyableBuilder {\n    this.config.copiedIcon = copiedIcon\n    return this\n  }\n\n  public copiedTooltip(\n    copiedTooltip: boolean | string | ReactNode,\n  ): CopyableBuilder {\n    this.config.copiedToolTip = copiedTooltip\n    return this\n  }\n\n  public copyTooltip(\n    copyToolTip: boolean | string | ReactNode,\n  ): CopyableBuilder {\n    this.config.copyToolTip = copyToolTip\n    return this\n  }\n\n  public onCopy(onCopy: () => void): CopyableBuilder {\n    this.config.onCopy = onCopy\n    return this\n  }\n\n  public create(): Copyable {\n    return this.config\n  }\n}\n","import { Ellipsis, EllipsisBuilder } from \"./ellipsis-config\"\n\nimport {\n  Children,\n  FC,\n  Fragment,\n  MutableRefObject,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\nimport {\n  applyCopyableIconSize,\n  applyExpandLabelCss,\n  applyFontColor,\n  applyFontContentStyle,\n  applyOperationSpan,\n} from \"./base-style\"\nimport { css } from \"@emotion/react\"\nimport { measureElement } from \"./measure-element\"\nimport { BaseProps } from \"./interface\"\nimport { Copyable, CopyableBuilder } from \"./copyable-config\"\nimport { globalColor, illaPrefix } from \"@illa-design/theme\"\nimport { Trigger } from \"@illa-design/trigger\"\nimport {\n  ConfigProviderContext,\n  ConfigProviderProps,\n  def,\n} from \"@illa-design/config-provider\"\nimport useMeasure from \"react-use-measure\"\nimport { SuccessCircleIcon, CopyIcon } from \"@illa-design/icon\"\nimport { mergedToString } from \"@illa-design/system\"\n\nfunction getEllipsis(\n  configProviderProps: ConfigProviderProps,\n  ellipsis?: boolean | Ellipsis,\n): Ellipsis {\n  let originEllipsis: Ellipsis\n  if (typeof ellipsis == \"boolean\" && ellipsis) {\n    originEllipsis = new EllipsisBuilder().create()\n  } else if (\n    (typeof ellipsis == \"boolean\" && !ellipsis) ||\n    ellipsis == undefined\n  ) {\n    originEllipsis = new EllipsisBuilder()\n      .expandable(false)\n      .tooltip(false)\n      .create()\n  } else {\n    originEllipsis = ellipsis\n  }\n  const locale = configProviderProps.locale?.typography ?? def.typography\n  if (originEllipsis.expandLabel == undefined) {\n    originEllipsis.expandLabel = locale[\"expandLabel\"]\n  }\n  if (originEllipsis.rows == undefined) {\n    originEllipsis.rows = 2\n  }\n  return originEllipsis\n}\n\nfunction getCopyable(\n  configProviderProps: ConfigProviderProps,\n  copyable?: boolean | Copyable,\n): Copyable {\n  // get copyable\n  let originCopyable: Copyable\n  if (typeof copyable == \"boolean\" && copyable) {\n    originCopyable = new CopyableBuilder().create()\n  } else if (\n    (typeof copyable == \"boolean\" && !copyable) ||\n    copyable == undefined\n  ) {\n    originCopyable = new CopyableBuilder()\n      .copyIcon(null)\n      .copiedIcon(null)\n      .create()\n  } else {\n    originCopyable = copyable\n  }\n  const locale = configProviderProps.locale?.typography ?? def.typography\n  if (originCopyable.copyToolTip == undefined) {\n    originCopyable.copyToolTip = locale[\"copyToolTip\"]\n  }\n  if (originCopyable.copiedToolTip == undefined) {\n    originCopyable.copiedToolTip = locale[\"copiedToolTip\"]\n  }\n  if (originCopyable.copyIcon == undefined) {\n    originCopyable.copyIcon = (\n      <CopyIcon color={globalColor(`--${illaPrefix}-grayBlue-01`)} />\n    )\n  }\n  if (originCopyable.copiedIcon == undefined) {\n    originCopyable.copiedIcon = (\n      <SuccessCircleIcon color={globalColor(`--${illaPrefix}-green-03`)} />\n    )\n  }\n  return originCopyable\n}\n\nfunction copyToClipboard(text: string) {\n  navigator.clipboard.writeText(text).then()\n}\n\nexport const Base: FC<BaseProps> = (props) => {\n  // get props\n  const {\n    colorScheme = \"gray\",\n    ellipsis,\n    bold,\n    disabled,\n    mark,\n    underline,\n    deleted,\n    copyable,\n  } = props\n\n  let configContext = useContext<ConfigProviderProps>(ConfigProviderContext)\n\n  let originEllipsis = getEllipsis(configContext, ellipsis)\n  let originCopyable = getCopyable(configContext, copyable)\n\n  // set expandable state\n  const [showExpand, setShowExpand] = useState<boolean>(\n    originEllipsis.expandable,\n  )\n  const [haveShowExpandSize, setHaveShowExpandSize] = useState<boolean>(false)\n  const finalShowExpand = originEllipsis.expandable && showExpand\n\n  const [clipShowText, setClipShowText] = useState(\"\")\n  const [copied, setCopied] = useState(false)\n\n  // get ref\n  const contentRef =\n    useRef<HTMLDivElement>() as MutableRefObject<HTMLDivElement>\n  const operationRef = useRef<HTMLElement>() as MutableRefObject<HTMLElement>\n\n  // apply content\n  const contentCss = css`\n    ${applyFontColor(colorScheme)};\n    ${applyFontContentStyle(bold, mark, underline, deleted, disabled)};\n  `\n  const content = (\n    <span ref={contentRef} css={contentCss}>\n      {finalShowExpand ? clipShowText : props.children}\n    </span>\n  )\n\n  // apply operation\n  const copyableElement = (\n    <span\n      onClick={() => {\n        setCopied(true)\n        copyToClipboard(mergedToString(Children.toArray(props.children)))\n        if (originCopyable.onCopy != undefined) {\n          originCopyable.onCopy()\n        }\n      }}\n      css={applyCopyableIconSize}\n    >\n      {!copied ? originCopyable.copyIcon : originCopyable.copiedIcon}\n    </span>\n  )\n\n  const showCopyTooltip = copied\n    ? originCopyable.copiedToolTip\n    : originCopyable.copyToolTip\n\n  const expandPanel = finalShowExpand && !haveShowExpandSize && (\n    <Fragment>\n      <span css={contentCss}>\n        ...\n        {originEllipsis.suffix && <span>{originEllipsis.suffix}</span>}\n      </span>\n      {\n        <a\n          css={applyExpandLabelCss()}\n          onClick={() => {\n            if (originEllipsis.onExpand != undefined) {\n              originEllipsis.onExpand()\n            }\n            setShowExpand(false)\n          }}\n        >\n          {originEllipsis.expandLabel}\n        </a>\n      }\n    </Fragment>\n  )\n\n  const copyablePanel =\n    copyable && originCopyable.copyIcon && showCopyTooltip ? (\n      <Trigger\n        closeOnClick={false}\n        content={\n          copied ? originCopyable.copiedToolTip : originCopyable.copyToolTip\n        }\n      >\n        {copyableElement}\n      </Trigger>\n    ) : (\n      copyableElement\n    )\n\n  const operation = (showExpand || copyable) && (\n    <span ref={operationRef} css={applyOperationSpan}>\n      {expandPanel}\n      {copyablePanel}\n    </span>\n  )\n\n  const [ref, { width }] = useMeasure({ polyfill: ResizeObserver })\n\n  const base = (\n    <span ref={ref}>\n      {content}\n      {operation}\n    </span>\n  )\n\n  // update clip text\n  useEffect(() => {\n    let isMount = true\n    if (finalShowExpand) {\n      const { screenString, isClip } = measureElement(\n        contentRef.current,\n        operationRef.current,\n        originEllipsis.rows,\n        props.children,\n      )\n      if (isMount) {\n        setClipShowText(screenString)\n        setHaveShowExpandSize(!isClip)\n      }\n    }\n    return () => {\n      isMount = false\n    }\n  }, [width, finalShowExpand, originEllipsis.rows, props.children])\n\n  return base\n}\n"],"names":["Ellipsis","__publicField","EllipsisBuilder","expandable","rows","suffix","expandLabel","tooltip","fun","colorSchemes","applyOperationSpan","css","applyFontColor","colorScheme","color","getSpecialThemeColor","applyFontContentStyle","bold","mark","underline","deleted","disabled","finalCss","globalColor","illaPrefix","bgColor","getColor","applyExpandLabelCss","applyCopyableIconSize","inRange","computeElement","maxHeight","lastLineMaxWidth","lines","_a","measureText","textNode","fullText","start","end","mid","getContentHeight","contentRef","height","c","getContentWidth","width","list","i","getMaxLineWidth","measureElement","operationRef","children","lineHeight","operationWidth","mergedToString","Children","originStyle","styleString","name","finalString","Copyable","CopyIcon","SuccessCircleIcon","CopyableBuilder","copyIcon","copiedIcon","copiedTooltip","copyToolTip","onCopy","getEllipsis","configProviderProps","ellipsis","originEllipsis","locale","def","getCopyable","copyable","originCopyable","jsx","copyToClipboard","text","Base","props","configContext","useContext","ConfigProviderContext","showExpand","setShowExpand","useState","haveShowExpandSize","setHaveShowExpandSize","finalShowExpand","clipShowText","setClipShowText","copied","setCopied","useRef","contentCss","content","copyableElement","showCopyTooltip","expandPanel","jsxs","Fragment","copyablePanel","Trigger","operation","ref","useMeasure","base","useEffect","isMount","screenString","isClip"],"mappings":"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"}