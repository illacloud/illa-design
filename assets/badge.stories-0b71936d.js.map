{"version":3,"file":"badge.stories-0b71936d.js","sources":["../../../../packages/badge/src/style.ts","../../../../packages/badge/src/usePrevious.tsx","../../../../packages/badge/src/count.tsx","../../../../packages/badge/src/badge.tsx"],"sourcesContent":["import { css, keyframes, SerializedStyles } from \"@emotion/react\"\nimport { globalColor, illaPrefix } from \"@illa-design/theme\"\nimport { isObject } from \"@illa-design/system\"\nimport { BadgeColorScheme, BadgeStatus } from \"./interface\"\nimport { ReactNode } from \"react\"\n\nconst statusColor = {\n  default: `--${illaPrefix}-grayBlue-06`,\n  processing: `--${illaPrefix}-blue-03`,\n  success: `--${illaPrefix}-green-03`,\n  warning: `--${illaPrefix}-yellow-03`,\n  error: `--${illaPrefix}-red-03`,\n}\n\nexport const badgeScale = keyframes`\n  from {\n    transform: scale(0, 0);\n  }\n\n  to {\n    transform: scale(1, 1);\n  }\n`\nexport const applyBadge = css`\n  display: inline-block;\n  position: relative;\n  line-height: 1;\n`\n\nexport function applyBadgeDot(\n  color: string,\n  hasChildren: boolean,\n  hasStatus?: boolean,\n): SerializedStyles {\n  let position: string = ``\n  if (!hasStatus && hasChildren) {\n    position += `\n      position: absolute;\n      transform: translate(50%, -50%);\n      transform-origin: 100% 0;\n      right: 0px;\n    `\n  }\n  return css`\n    width: 6px;\n    height: 6px;\n    border-radius: 50%;\n    border: solid 1px ${globalColor(`--${illaPrefix}-white-01`)};\n    background-color: ${color};\n    display: inline-block;\n    ${position}\n  `\n}\n\nexport function applyBadgeNumberOrText(\n  color: string,\n  hasChildren: boolean,\n  length: number,\n): SerializedStyles {\n  const padding = length > 1 ? \"padding: 0 6px;\" : \"\"\n  const position = hasChildren\n    ? `\n    position: absolute;\n    transform: translate(50%, -50%);\n    transform-origin: 100% 0;\n    right: 0px;\n  `\n    : \"\"\n  return css`\n    min-width: 20px;\n    height: 20px;\n    display: inline-flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    font-size: 12px;\n    font-weight: 500;\n    line-height: 20px;\n    border-radius: 10px;\n    box-sizing: border-box;\n    transition: 0.15s all linear;\n    border: solid 2px ${globalColor(`--${illaPrefix}-white-01`)};\n    background-color: ${color};\n    color: ${globalColor(`--${illaPrefix}-white-01`)};\n    text-align: center;\n    white-space: pre;\n    ${position + padding}\n  `\n}\n\nexport function applyBadgeScale(isChanged: boolean = false): SerializedStyles {\n  return isChanged\n    ? css`\n        animation-name: ${badgeScale};\n        animation-timing-function: cubic-bezier(0.3, 1.3, 0.3, 1);\n        animation-duration: 0.5s;\n        animation-iteration-count: 1;\n        animation-play-state: running;\n      `\n    : css``\n}\n\nexport const applyBadgeStatusWrapper = css`\n  display: inline-flex;\n  align-items: center;\n`\n\nexport const applyBadgeStatusText = css`\n  margin-left: 9px;\n  font-size: 12px;\n  line-height: 1.33;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-02`)};\n`\n\nexport function getDotColor(\n  count: number | ReactNode,\n  colorScheme?: BadgeColorScheme,\n  status?: BadgeStatus,\n): string {\n  let colorStyle\n  if (colorScheme) {\n    colorStyle = globalColor(`--${illaPrefix}-${colorScheme}-03`)\n    if (!colorStyle) {\n      colorStyle = colorScheme\n    }\n  }\n  if (status) {\n    colorStyle = globalColor(statusColor[status])\n  }\n  colorStyle = colorStyle\n    ? colorStyle\n    : isObject(count)\n    ? globalColor(`--${illaPrefix}-white-01`)\n    : globalColor(`--${illaPrefix}-red-03`)\n  return colorStyle\n}\n","// thx arco\nimport { ComponentState, PropsWithoutRef, useEffect, useRef } from \"react\"\n\nexport default function usePrevious<T>(\n  value: PropsWithoutRef<T> | ComponentState,\n) {\n  const ref = useRef()\n  useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\n","import usePrevious from \"./usePrevious\"\nimport { CountProps } from \"./interface\"\nimport { deleteCssProps, globalColor, illaPrefix } from \"@illa-design/theme\"\nimport { applyBadgeNumberOrText, applyBadgeScale } from \"./style\"\nimport { Key } from \"react\"\n\nconst defaultColor = globalColor(`--${illaPrefix}-red-03`)\nexport function Count(props: CountProps) {\n  const { count, color = defaultColor, hasChildren, ...restProps } = props\n  const oldCount = usePrevious(count)\n  const isChanged = count !== oldCount\n\n  return (\n    <span\n      css={applyBadgeNumberOrText(\n        color,\n        hasChildren ?? false,\n        (count as string).length,\n      )}\n      {...deleteCssProps(restProps)}\n    >\n      <span key={count as Key} css={applyBadgeScale(isChanged)}>\n        {count}\n      </span>\n    </span>\n  )\n}\n","import { CSSProperties, forwardRef, useMemo } from \"react\"\nimport { BadgeProps } from \"./interface\"\nimport { isObject } from \"@illa-design/system\"\nimport {\n  applyBadge,\n  applyBadgeDot,\n  applyBadgeNumberOrText,\n  applyBadgeStatusText,\n  applyBadgeStatusWrapper,\n  getDotColor,\n} from \"./style\"\n\nimport { Count } from \"./count\"\nimport { applyBoxStyle, deleteCssProps } from \"@illa-design/theme\"\n\nexport const Badge = forwardRef<HTMLSpanElement, BadgeProps>((props, ref) => {\n  const {\n    count = 0,\n    text,\n    dot,\n    maxCount = 99,\n    colorScheme,\n    offset,\n    status,\n    children,\n    ...restProps\n  } = props\n\n  const [leftOffset, topOffset] = offset || []\n  const dotStyle: CSSProperties = {}\n\n  if (leftOffset) {\n    dotStyle.marginRight = -leftOffset\n  }\n  if (topOffset) {\n    dotStyle.marginTop = topOffset\n  }\n\n  let colorStyle = getDotColor(count, colorScheme, status)\n\n  const hasChildren = !!children\n\n  const renderBadge = useMemo(() => {\n    // display status dot\n    if (status) {\n      return (\n        <span css={applyBadgeStatusWrapper} style={dotStyle}>\n          <span css={applyBadgeDot(colorStyle, hasChildren, true)} />\n          {text && <span css={applyBadgeStatusText}>{text}</span>}\n        </span>\n      )\n    }\n    // display customized icon\n    if (isObject(count)) {\n      return (\n        <span\n          css={applyBadgeNumberOrText(colorStyle, hasChildren, 0)}\n          style={dotStyle}\n        >\n          {count}\n        </span>\n      )\n    }\n    // display text\n    if (text) {\n      return (\n        <span\n          css={applyBadgeNumberOrText(colorStyle, hasChildren, text.length)}\n          style={dotStyle}\n        >\n          {text}\n        </span>\n      )\n    }\n    // display dot\n    if (dot && count && (count as number) > 0) {\n      return (\n        <span css={applyBadgeDot(colorStyle, hasChildren)} style={dotStyle} />\n      )\n    }\n\n    let renderCount =\n      count && (count as number) > maxCount ? `${maxCount}+` : `${count}`\n    return count && (count as number) > 0 ? (\n      <Count\n        count={renderCount}\n        hasChildren={hasChildren}\n        color={colorStyle}\n        style={dotStyle}\n      />\n    ) : null\n  }, [colorStyle, count, dot, dotStyle, hasChildren, maxCount, status, text])\n  return (\n    <span\n      css={[applyBadge, applyBoxStyle(props)]}\n      ref={ref}\n      {...deleteCssProps(restProps)}\n    >\n      {children}\n      {renderBadge}\n    </span>\n  )\n})\n\nBadge.displayName = \"Badge\"\n"],"names":["statusColor","illaPrefix","badgeScale","keyframes","applyBadge","css","applyBadgeDot","color","hasChildren","hasStatus","position","globalColor","applyBadgeNumberOrText","length","padding","applyBadgeScale","isChanged","applyBadgeStatusWrapper","applyBadgeStatusText","getDotColor","count","colorScheme","status","colorStyle","isObject","usePrevious","value","ref","useRef","useEffect","defaultColor","Count","props","restProps","oldCount","jsx","deleteCssProps","Badge","forwardRef","text","dot","maxCount","offset","children","leftOffset","topOffset","dotStyle","renderBadge","useMemo","jsxs","renderCount","applyBoxStyle"],"mappings":"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"}